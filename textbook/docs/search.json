[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":" series labs/tutorials currently development (2020-2021) two-semester graduate-level statistics sequence Psychology @ Brooklyn College CUNY. goal tutorials 1) develop deeper conceptual understanding principles statistical analysis inference; 2) develop practical skills data-analysis, using increasingly popular statistical software environment R code reproducible analyses.first set 13 labs roughly tracks “Thinking Data”1 “Answering questions data”;2 second set labs (written weekly basis Spring 2021 semester) roughly track “Experimental Design Analysis Psychology.”3Although primary aim create lab exercises reinforce stats concepts also train basic R coding skills data-analysis, many side goals, including showing students advantages using R markdown Github creating communicating research products. example, aside tutorials, developing R package called vertical,4 highlights advantages learning R researchers psychology. , possible, hope inject broader discussion awesome R tools use labs (time, deep-dive requires separate course…maybe coming soon browser near ).","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Right now ’s Dec 4th, 2020; Anjali Krishnan & co-teaching stats course graduate students Master’s Experimental Psychology program. semester almost , next semester moving stats II. first time tried coordinate efforts graduate level, ’s fun.years ago, put heads together create free undergraduate textbook (Answering questions data) lab manual, covered exercises across four software environments, R, Excel, SPSS, Jamovi (Anjali’s verion ). resources exist Github repos, licensed CC 4.0, can copied, remixed, re-used license.Anjali teaching stats sequence graduate level several years, program decided expand statistics offering include additional lab hours. , year, ’m joining club writing lab curriculum every week course. now, decided gather labs written far put “fancy” new bs4_book() bookdown format.Anjali using two statistics textbooks lecture portion course. first semester mostly follows “Thinking Data,”5 second semester mostly follows “Experimental Design Analysis Psychology.”6 Coincidentally, trained John Vokey & Scott Allen University Lethbridge (worked textbook undergrad), Anjali trained Hérve Abdi UT Austin. , seems academically inherited impulse create statistics curriculum.","code":""},{"path":"preface.html","id":"for-students","chapter":"Preface","heading":"0.1 For Students","text":"student class questions ’s going class, please ask email .student interested using materials, class, don’t know begin, hope little overview helpful. think enough breadcrumbs work way course material .creating new chapters almost week Fall 2020 Spring 2021. chapter series lab exercises corresponding closely chapters textbooks use stats II.7 labs use R, RStudio, Github complete assignments. See instructions next Getting Started section tips installing necessary software.lab similar structure, written chapter corresponding lecture video followed generalization assignment. Lab content split conceptual sections (reinforcing statistical concept R), practical sections (showing specific tasks analyses R). start basic R coding, discuss new coding concepts needed. generalization problems end lab designed solved R code, challenge students independently apply coding concepts lab solving similar new assignment problems. time, assigned problems walkthrough videos showing example solutions case get stuck.follow materials, gain experience using R Rstudio, well writing powerful amazing R Markdown language (e.g., allowed make web-book), also become familiar using Github sharing research assets like statistical analyses produce R. Also, hope find materials useful enriching understanding statistics. Best luck!","code":""},{"path":"preface.html","id":"for-instructors","chapter":"Preface","heading":"0.2 For Instructors","text":"materials currently development, also released CC -SA 4.0 license. result, materials free remix re-use license.Feel free fork repo use materials see fit. like contribute development materials, feel free submit pull-request suggested changes (leave comment github issues).","code":""},{"path":"preface.html","id":"cc-by-sa-4.0-license","chapter":"Preface","heading":"0.3 CC BY-SA 4.0 license","text":"license means free :Share: copy redistribute material medium formatAdapt: remix, transform, build upon material purpose, even commercially.licensor revoke freedoms long follow license terms.following terms:Attribution: must give appropriate credit, provide link license, indicate changes made. may reasonable manner, way suggests licensor endorses use.ShareAlike: remix, transform, build upon material, must distribute contributions license original.additional restrictions: may apply legal terms technological measures legally restrict others anything license permits.","code":""},{"path":"preface.html","id":"copying-the-textbook","chapter":"Preface","heading":"0.4 Copying the textbook","text":"textbook written R-Studio, using R Markdown, compiled web-book format using bookdown package. general, thank larger R community amazing tools made.source code compiling book available GitHub repository book:https://github.com/CrumpLab/rstatsforpsychIn principle, anybody fork otherwise download repository. Load .Rproj file R-studio compile entire book. individual .rmd files chapter edited content style better suit needs.want contribute version textbook, make pull requests GitHub, discuss issues make requests issues tab.Note self come back quick video rundown process.","code":""},{"path":"preface.html","id":"citation","chapter":"Preface","heading":"0.5 Citation","text":"Note, date reflects latest compilation book. DOI minted 12/10/2020.Crump, M. J. C. (2021, May 06). Reproducible statistics psychologists R: Lab Tutorials. https://doi.org/10.17605/OSF.IO/KBHGA","code":""},{"path":"r-rstudio-github.html","id":"r-rstudio-github","chapter":"R, RStudio, & Github","heading":"R, RStudio, & Github","text":"meet first class things try home get started.","code":""},{"path":"r-rstudio-github.html","id":"install-r-and-r-studio","chapter":"R, RStudio, & Github","heading":"0.6 Install R and R Studio","text":"Download install R computer. R website https://www.r-project.orgDownload install R-studio. must download install R first installing R-studio. R-studio website https://www.rstudio.com","code":""},{"path":"r-rstudio-github.html","id":"github.com-and-github-desktop","chapter":"R, RStudio, & Github","heading":"0.7 Github.com and Github Desktop","text":"Create free github account. github website https://github.comDownload install github desktop https://desktop.github.com","code":""},{"path":"r-rstudio-github.html","id":"test-the-pipeline","chapter":"R, RStudio, & Github","heading":"0.8 Test the pipeline","text":"semester students submitting work github repositories. Follow steps test github pipeline make sure working:Create new R project (initialize git)Create new R Markdown documentPublish R project folder Github.comMake commits demonstrate local changes reflected github.com","code":""},{"path":"r-rstudio-github.html","id":"why-are-we-using-r-for-this-statistics-lab","chapter":"R, RStudio, & Github","heading":"0.9 Why are we using R for this statistics lab?","text":"quick attempt explain think totally worth learn R data-analysis, psychologists general.","code":""},{"path":"r-rstudio-github.html","id":"rstudio-run-through","chapter":"R, RStudio, & Github","heading":"0.10 RStudio run through","text":"look features RStudio.","code":""},{"path":"basic-r-programming.html","id":"basic-r-programming","chapter":"Basic R programming","heading":"Basic R programming","text":"take number different approaches using R learn statistics semester. One approaches learn basic coding/scripting R, can become entire course . video gives impression coding looks feels like R Studio, introduces basic coding concepts variables, logic, loops, functions.","code":""},{"path":"practice-problems.html","id":"practice-problems","chapter":"Practice problems","heading":"Practice problems","text":"“8/27/2020 | Last Compiled: 2021-05-06”chapter supplement students looking exercises work coding skills outside class. labs course designed develop practical data analysis skills R, conceptual knowledge statistics using R way interact statistical phenomena. assume students may new coding. Don’t worry, student course, gradually introduce coding concepts throughout course.Learning code takes time effort, can intensely frustrating beginning. learning programming first time undergraduate, advisor (John Vokey) showed computer desk told teach program…pointed large hole drywall underneath desk said, “kick wall.”Learning teach coding also hard. ’ve trying years. However, stumble across methods seem promising, /immensely helpful , like advertise . example years ago came across completely different approach learning programming website Project Euler, highly recommend. website presents series problems, usually mathematical ones, like sum first 1000 prime numbers? challenge use programming language find correct answer. submit correct answers, unlock forum post working code (many different languages).idea Project Euler learn basic programming skills trying solve concrete problems. might know syntax make computer accomplish particular goal , particular goal mind, use search figure make programming language something.problems inspired Project Euler. past classes sometimes assigned problems little guidance anything R, class sat around puzzling things couple weeks. time, listing problems, along tips videos, eventually example code problems. Although problems involve statistics, . , intended concrete enough know question asking accomplish.think worthwhile try solve problems . time, can really helpful example solutions get stuck. P.S. favorite problem snakes ladders simulation, think can learn solve problem R, well way able solve sorts data-analysis problems, give problem try solve , congrats, think ’s pretty impressive .","code":""},{"path":"practice-problems.html","id":"programming-challenges-i","chapter":"Practice problems","heading":"0.11 Programming Challenges I","text":"purpose problems, try solve ? important overarching goal learning code become justifiably confident ability write scripts solve problems. end day applying skills new problems without textbook answers, ability solve problems rests learning write new code works. abstract problem, instead requires practice writing code solve new problems. following problem sets designed primarily aim mind. Solving problems simultaneously develop ability write scripts solve new problems, well give hands exposure learning syntax R language. problems written specifically R language, solving problems another language useful strategy learning syntax another language.problems roughly ordered terms difficulty, easier problems first harder problems second. problems can solve combining foundational programming concepts already discussed. , can solved declaring variables, using logic statements, loops create algorithms solve problem. problems require writing functions, formal general way writing algorithms. Many problems can solved quickly efficiently writing lines code, using intrinsic functions already supplied R programming language. problems might consider writing different solutions explore different syntax options.","code":""},{"path":"practice-problems.html","id":"easier-problems","chapter":"Practice problems","heading":"0.12 Easier Problems","text":"simple math numbers, addition, subtraction, multiplication, divisionPut numbers variables, simple math variablesWrite code place numbers 1 100 separately variable using loop. , using seq function.Find sum integer numbers 1 100.can use sum() function vector numbersHow without using sum function? example, use loop accomplish task?Write function find sum integers two values.List odd numbers 1 100.use seq() functionHow without using seq() function? Consider using mod function %%, evaluates whether remainder dividing one number another.List prime numbers 1 1000.Generate 100 random numberscheck runif functionto look help file run ?runif console. general ?function_name show help file function R.Generate 100 random numbers within specific rangerunif can thisWrite functions give descriptive statistics vector variable storing multiple numbers. Write functions following without using R intrinsics: mean, mode, median, range, standard deviationIt’s ok use sum() length()creative see can find multiple solutions. example two ways compute mean.Count number characters string variableuse strsplit() split character vectorCount number words string variableuse strsplitCount number sentences string variableconsider splitting . characterCount number times specific character occurs string variabletable() function can help count individual occurencesHow without table function?logical test see one word found within text another string variable.example given word hello, can run test see contained test sentence?consider using %%Put current computer time milliseconds variableMeasure long piece code takes run measuring time code run, code run, taking difference find total timeMeasure long piece code takes run measuring time code run, code run, taking difference find total timeRead .txt file .csv file variableRead .txt file .csv file variablescan() general purpose text input functionread.csv() read .csv filesOutput contents variable .txt filewrite.csv()Create variable stores 20x20 matrix random numbershere’s make matrix full 0sOutput matrix txt file using commas tabs separate column values, new lines separate row valueswrite.csv()","code":"\n# syntax for writing a function\n\nfunction_name <- function(input_name){\n  #body where you modify input\n  return(name_of_output)\n}\n\n# running the function\nfunction_name(some_input)\n# four divided by two gives no remainder\n# the mod function shows 0\n4%%2\n#> [1] 0\n\n# 5 divided by two gives a remainder\n# the mod function shows 1\n5%%2\n#> [1] 1\n# using sum and length\nmean_A <- function(x){\n  return(sum(x)/length(x))\n}\n\nsome_numbers <- c(1,2,3,4,5)\nmean_A(some_numbers)\n#> [1] 3\n\n# no intrinsics\nmean_B <- function(x){\n  counter <- 0\n  total_sum <-0\n  for(i in x){\n    total_sum <- total_sum+i\n    counter<-counter+1\n  }\n  return(total_sum/counter)\n}\n\nmean_B(some_numbers)\n#> [1] 3\na <- \"adskfjhkadsjfh\"\nstrsplit(a,split=\"\")\n#> [[1]]\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n# note that strsplit returns its result in a list\nb <-strsplit(a,split=\"\")\nb[[1]] # access all elements in list 1\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nb[[1]][1] # access first element of list 1\n#> [1] \"a\"\n\n# lists can be unlisted\nd <- unlist(strsplit(a,split=\"\"))\nd  # all elements in character vector\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nd[1] #first element\n#> [1] \"a\"\na <- \"this is a sentence\"\nstrsplit(a,split=\" \") # use a space as the splitting character\n#> [[1]]\n#> [1] \"this\"     \"is\"       \"a\"        \"sentence\"\na <- c(1,3,2,3,2,3,2,3,4,5,4,3,4,3,4,5,6,7)\ntable(a)\n#> a\n#> 1 2 3 4 5 6 7 \n#> 1 3 6 4 2 1 1\ntest_word <- \"hello\"\ntest_sentence <-\"is the word hello in this sentence\"\na <- c(1,2,3,4,5)\nb <- 5\nd <- 8\n\n# question is b in a?\nb%in%a\n#> [1] TRUE\n\n# is d in a?\nd%in%a\n#> [1] FALSE\nprint(as.numeric(Sys.time())*1000, digits=15)\n#> [1] 1607480572704.37\na <- matrix(0, ncol=20,nrow=20)"},{"path":"practice-problems.html","id":"harder-problems","chapter":"Practice problems","heading":"0.13 Harder Problems","text":"","code":""},{"path":"practice-problems.html","id":"fizzbuzz","chapter":"Practice problems","heading":"0.13.1 FizzBuzz","text":"List numbers 1 100 following constraints. number can divided three evenly, print Fizz instead number. number can divided five evenly, print Buzz instead number. Finally, number can divided three five evenly, print FizzBuzz instead number. answer look something like :1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16, 17, Fizz, 19, Buzz, Fizz, 22, 23, Fizz, Buzz, 26, Fizz, 28, 29, FizzBuzz, 31, 32, Fizz, 34, Buzz, Fizz, 37, 38, Fizz, Buzz, 41, Fizz, 43, 44, FizzBuzz, 46, 47, Fizz, 49, Buzz, Fizz, 52, 53, Fizz, Buzz, 56, Fizz, 58, 59, FizzBuzz, 61, 62, Fizz, 64, Buzz, Fizz, 67, 68, Fizz, Buzz, 71, Fizz, 73, 74, FizzBuzz, 76, 77, Fizz, 79, Buzz, Fizz, 82, 83, Fizz, Buzz, 86, Fizz, 88, 89, FizzBuzz, 91, 92, Fizz, 94, Buzz, Fizz, 97, 98, Fizz, BuzzHere bits might useful","code":"\n# a number mod three will return 0 if it divides evenly\n6%%3\n#> [1] 0\n# a number mod five will return 0 if it divides evenly\n10%%5\n#> [1] 0\n\n# examples of replacing elements of a vector\na<-c(1,2,3,4,5)\na[3]<-\"Fizz\"\na\n#> [1] \"1\"    \"2\"    \"Fizz\" \"4\"    \"5\"\n\n# notice that a starts as a numeric vector\n# but changes to an all character vector after \"Fizz\" is added"},{"path":"practice-problems.html","id":"frequency-counts","chapter":"Practice problems","heading":"0.13.2 Frequency Counts","text":"Take text input, able produce table shows counts character text. problem related earlier easy problem asking count number times single letter appears text. slightly harder problem general version: count frequencies unique characters text.’s easy way thisCan without using table? Attempt problem using data.frame. tips","code":"\na<-\"some text that has some letters\"\ntable(unlist(strsplit(a,split=\"\")))\n#> \n#>   a e h l m o r s t x \n#> 5 2 5 2 1 2 2 1 4 6 1\n# data.frame is data format that produces named columns of data\n\n# creates two vectors\nnumbers <-c(1,2,3,4,5)\nletters <-c(\"a\",\"b\",\"c\",\"d\",\"e\")\n\n# make a data.frame from two vectors\nnew_df <- data.frame(numbers,letters)\nprint(new_df)\n#>   numbers letters\n#> 1       1       a\n#> 2       2       b\n#> 3       3       c\n#> 4       4       d\n#> 5       5       e\n\n# access individual columns of dataframe\nnew_df$numbers\n#> [1] 1 2 3 4 5\nnew_df$letters\n#> [1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\n# get names of data.frame\nnames(new_df)\n#> [1] \"numbers\" \"letters\"\n\n# break the problem into steps\n# first part of problem is to identify all unique character in the string\na<-c(1,2,3,4,5,2,2,3,2,3)\nunique(a)\n#> [1] 1 2 3 4 5\nb<-\"a string with some letters\"\nunique(unlist(strsplit(b,split=\"\")))\n#>  [1] \"a\" \" \" \"s\" \"t\" \"r\" \"i\" \"n\" \"g\" \"w\" \"h\" \"o\" \"m\" \"e\" \"l\"\n\n# second part is to go through each of the unique letters in the list of unique letters, and for each count the number of times they appear in the original text\n# store the results in a data.frame with two columns, one with the letter names, and another with the counts"},{"path":"practice-problems.html","id":"test-the-random-number-generator","chapter":"Practice problems","heading":"0.13.3 Test the Random Number Generator","text":"Test random number generator flat distribution. Generate million random numbers 0 100. Count number 0s, 1s, 2s, 3s, etc. way 100. Look counts numbers determine relatively equal. example, plot counts Excel make histogram. bars close flat, number equal chance selected, random number generator working without bias.","code":"\na<-runif(100,0,100)\nhist(a)"},{"path":"practice-problems.html","id":"create-a-multiplication-table","chapter":"Practice problems","heading":"0.13.4 Create a multiplication table","text":"Generate matrix multiplication table. example, labels columns numbers 1 10, labels rows numbers 1 10. contents cells matrix correct answer multiplying column value row value.","code":"\n# you can multiply all numbers in a vector in one go\na<-c(1,2,3,4,5,6,7,8,9,10)\na*2\n#>  [1]  2  4  6  8 10 12 14 16 18 20\n\n# you can nest loops\nfor(i in 1:3){\n  for(j in 1:3){\n    print(i*j)\n  }\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 2\n#> [1] 4\n#> [1] 6\n#> [1] 3\n#> [1] 6\n#> [1] 9"},{"path":"practice-problems.html","id":"encrypt-and-decrypt-the-alphabet","chapter":"Practice problems","heading":"0.13.5 Encrypt and Decrypt the Alphabet","text":"Turn normal english text encrypted version text, able turn decrypted text back normal english text. simple encryption scramble alphabet letter corresponds new randomly chosen (unique) letter.\n- following code shows example using numbershere different approach making use factor() function","code":"\noriginal_sequence <- c(1,2,3,4,5,2,2,3,2,4,5,2)\nnumbers <- unique(original_sequence)\nscrambled_numbers <- sample(numbers)\nencryption_key <- data.frame(numbers,scrambled_numbers)\n\nencrypt_numbers <-function(input_sequence,key){\n  encrypted_sequence<-c()\n  for(i in 1:length(input_sequence)){\n    original_number <- input_sequence[i]\n    new_number <- key[key$numbers==original_number,]$scrambled_numbers\n    encrypted_sequence[i] <- new_number\n  }\n  return(encrypted_sequence)\n}\n\nencrypt_numbers(original_sequence,encryption_key)\n#>  [1] 3 5 4 1 2 5 5 4 5 1 2 5\noriginal_sequence <- c(1,2,3,4,5,2,2,3,2,4,5,2)\noriginal_sequence <- as.factor(original_sequence)\nlevels(original_sequence) # show names of levels in factor\n#> [1] \"1\" \"2\" \"3\" \"4\" \"5\"\nnew_sequence <- original_sequence # copy\nlevels(new_sequence)<-c(5,4,3,2,1) # rename the levels\nnew_sequence # all elements are now changed\n#>  [1] 5 4 3 2 1 4 4 3 4 2 1 4\n#> Levels: 5 4 3 2 1"},{"path":"practice-problems.html","id":"snakes-and-ladders","chapter":"Practice problems","heading":"0.13.6 Snakes and Ladders","text":"task write algorithm can simulate playing depicted Snakes Ladders board. assume roll dice produces random number 1 6. able simulate one played game, write loop simulate 1000 games, estimate average number dice rolls needed successfully complete game.-tip: consider simpler version problem. many times need roll dice dice rolls add 25 greater?add representaion board, change square player depending whether land ladder snake.","code":"\n# rolling a dice with sample\nsample(c(1,2,3,4,5,6),1)\n#> [1] 4\nsample(c(1,2,3,4,5,6),1)\n#> [1] 1\nsample(c(1,2,3,4,5,6),1)\n#> [1] 1\n\n# try one simulation\ntotal_sum<-0\nnumber_of_rolls<-0\nwhile(total_sum < 25){\n  number_of_rolls <- number_of_rolls+1\n  total_sum <-total_sum+sample(c(1,2,3,4,5,6),1)\n}\nnumber_of_rolls\n#> [1] 8\n\n# record the results from multiple simulations\n\nsave_rolls <- c()\nfor(sims in 1:100){\n  total_sum<-0\n  number_of_rolls<-0\n  while(total_sum < 25){\n    number_of_rolls <- number_of_rolls+1\n    total_sum <-total_sum+sample(c(1,2,3,4,5,6),1)\n  }\n  save_rolls[sims] <- number_of_rolls\n}\nmean(save_rolls)\n#> [1] 7.74"},{"path":"practice-problems.html","id":"dice-rolling-simulations","chapter":"Practice problems","heading":"0.13.7 Dice-rolling simulations","text":"Assume pair dice rolled. Using monte carlo-simulation, compute probabilities rolling 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, respectively.","code":""},{"path":"practice-problems.html","id":"monte-hall-problem","chapter":"Practice problems","heading":"0.13.8 Monte Hall problem","text":"monte-hall problem follows. contestant game show presented three closed doors. told prize behind one door, two goats behind two doors. asked choose door contains prize. making choice game show host opens one remaining two doors (chosen contestant), reveals goat. now two door remaining. contestant asked like switch choice door, keep initial choice. correct answer participant switch initial choice, choose door. increase odds winning. Demonstrate monte-carlo simulation odds winning higher participant switches participants keeps original choice.","code":""},{"path":"practice-problems.html","id":"doors-problem","chapter":"Practice problems","heading":"0.13.9 100 doors problem","text":"Problem: 100 doors row initially closed. make 100 passes doors. first time , visit every door toggle door (door closed, open ; open, close ). second time visit every 2nd door (door 2, 4, 6, etc.). third time, every 3rd door (door 3, 6, 9, etc.), etc, visit 100th door.Question: state doors last pass? open, closed?","code":""},{"path":"practice-problems.html","id":"bottles-of-beer-problem","chapter":"Practice problems","heading":"0.13.10 99 Bottles of Beer Problem","text":"puzzle, write code print entire “99 bottles beer wall”\" song. know song, lyrics follow form:X bottles beer wall X bottles beer Take one , pass around X-1 bottles beer wallWhere X X-1 replaced numbers course, 99 way 0.","code":""},{"path":"practice-problems.html","id":"random-tic-tac-toe","chapter":"Practice problems","heading":"0.13.11 Random Tic-Tac-Toe","text":"Imagine two players make completely random choices playing tic-tac-toe. game either end draw one two players win. Create monte-carlo simulation “random” version tic-tac-toe. 10,000 simulations, proportion time game won versus drawn?","code":""},{"path":"coding-reference.html","id":"coding-reference","chapter":"Coding Reference","heading":"Coding Reference","text":"page contains minimal explanations examples common coding patterns base R tidyverse. Students can make content requests contribute reference page, just leave message github issues course repository.","code":""},{"path":"coding-reference.html","id":"base-r","chapter":"Coding Reference","heading":"0.14 Base R","text":"Base R refers intrinsics capabilities R come fresh installation R. additional libraries needed.","code":""},{"path":"coding-reference.html","id":"variables","chapter":"Coding Reference","heading":"0.15 Variables","text":"variable name. <- assignment operator. example, 1 assigned object named .Variables classes describe contents.Classes allow disallow commands. example, can’t add numeric character:Classes can converted:","code":"\na <- 1\nx <- 1\nclass(x)\n#> [1] \"numeric\"\n\ny <- \"1\"\nclass(y)\n#> [1] \"character\"\n\nz <- TRUE\nclass(z)\n#> [1] \"logical\"\nx+y\n#> Error in x + y: non-numeric argument to binary operator\ny <- as.numeric(y)\nx+y\n#> [1] 2"},{"path":"coding-reference.html","id":"vectors","chapter":"Coding Reference","heading":"0.15.1 Vectors","text":"Vectors 1-dimensional objects name, can hold multiple elements class. number elements vector vector length. Manipulating vectors involves creating , storing, retrieving, changing elements inside vector.","code":""},{"path":"coding-reference.html","id":"vector-creation","chapter":"Coding Reference","heading":"0.15.1.1 Vector Creation","text":"multiple ways create vectorlength() returns number elements vector","code":"\na <- c() # create a NULL vector\na\n#> NULL\n\na <- 1:5 # assign a sequence to a name\na\n#> [1] 1 2 3 4 5\n\na <- c(1,2,3,4,5) # assign a vector made with combine c()\na\n#> [1] 1 2 3 4 5\n\n#pre-assign an empty vector\na <- vector(mode = \"numeric\", length=10)\na\n#>  [1] 0 0 0 0 0 0 0 0 0 0\n\na <- vector(mode = \"integer\", length=10)\na\n#>  [1] 0 0 0 0 0 0 0 0 0 0\n\na <- vector(mode = \"logical\", length=10)\na\n#>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\na <- vector(mode = \"character\", length=10)\na\n#>  [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\na < c(1,4,5)\n#>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nlength(a)\n#> [1] 10"},{"path":"coding-reference.html","id":"vector-combination","chapter":"Coding Reference","heading":"0.15.1.2 Vector Combination","text":"possible combine existing vectors together make new vector using c().However, attempt combine vectors different classes, R throw error, coerce (convert) one vectors class .","code":"\nx <- 1:5\ny <- 6:10\n\nx\n#> [1] 1 2 3 4 5\ny\n#> [1]  6  7  8  9 10\n\nz <- c(x,y)\nz\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nx <- 1:5\ny <- c(\"a\",\"b\",\"c\",\"d\",\"e\")\n\nx\n#> [1] 1 2 3 4 5\ny\n#> [1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\nz <- c(x,y)\nz\n#>  [1] \"1\" \"2\" \"3\" \"4\" \"5\" \"a\" \"b\" \"c\" \"d\" \"e\""},{"path":"coding-reference.html","id":"vector-indexing","chapter":"Coding Reference","heading":"0.15.1.3 Vector Indexing","text":"Vector indexing process isolating specific positions elements vector. Vector indexing uses [] notation.general syntax vector_name[positions], vector_name name vector, positions vector positions index.Logical vectors can indicate positions. case, elements TRUE positions returned","code":"\na <- c(23,34,45,56,67,78,89)\n\na[1] # returns the element in position 1\n#> [1] 23\n\na[1:3] # returns elements in positions 1 to 3\n#> [1] 23 34 45\n\na[c(4,5,6)]\n#> [1] 56 67 78\n\na[c(1,1,1)]\n#> [1] 23 23 23\na <- c(45,56,78)\n\na[c(TRUE, FALSE, FALSE)]\n#> [1] 45\n\na[c(FALSE, TRUE, FALSE)]\n#> [1] 56\n\na[c(FALSE, FALSE, TRUE)]\n#> [1] 78"},{"path":"coding-reference.html","id":"vector-indexing-and-assignment","chapter":"Coding Reference","heading":"0.15.1.4 Vector indexing and assignment","text":"Vector indexing can also used assign new elements indexed positions.","code":"\na <- c(45,56,78)\na\n#> [1] 45 56 78\n\na[3] <- 100\na\n#> [1]  45  56 100\n\na[1:3] <- \"Hello\"\na\n#> [1] \"Hello\" \"Hello\" \"Hello\""},{"path":"coding-reference.html","id":"logical-indexing","chapter":"Coding Reference","heading":"0.15.1.5 Logical indexing","text":"Vectors can indexing using logical comparisons (see section logic explanation examples logical comparisons).","code":"\na <- c(1,3,2,4,3,4)\n\na == 4 # create logical vector of positions containing 4\n#> [1] FALSE FALSE FALSE  TRUE FALSE  TRUE\n\n# inserting the above into a[] finds the elements equal to 4\na[a == 4] # elements equal to 4\n#> [1] 4 4\n\na[a < 4] # elements less than 4\n#> [1] 1 3 2 3\n\na[a <= 4] # elements less than or equal to 4\n#> [1] 1 3 2 4 3 4\n\na[a != 1] # elements not equal to 1\n#> [1] 3 2 4 3 4"},{"path":"coding-reference.html","id":"data.frame","chapter":"Coding Reference","heading":"0.15.2 Data.frame","text":"Data.frames 2-d storage objects, like table (excel sheet), columns rows.","code":"\na <- data.frame() # make an empty data.frame\na\n#> data frame with 0 columns and 0 rows\nclass(a)\n#> [1] \"data.frame\""},{"path":"coding-reference.html","id":"data.frame-creation","chapter":"Coding Reference","heading":"0.15.2.1 Data.frame creation","text":"common method create data.frame involves adding existing vectors together. Data.frames often also created loading data files 2-d tables. See also section using dplyr manipulate data dataframes. Data.frames also similar data.tables, tibbles, can usually interchanged.dim() returns number rows columns data.frame","code":"\nx <- c(1,2,3)\ny <- c(\"a\",\"b\",\"c\")\nz <- c(TRUE, TRUE,TRUE)\n\na <- data.frame(x,y,z)\na\n#>   x y    z\n#> 1 1 a TRUE\n#> 2 2 b TRUE\n#> 3 3 c TRUE\ndim(a)\n#> [1] 3 3"},{"path":"coding-reference.html","id":"indexing-by-column-name","chapter":"Coding Reference","heading":"0.15.2.2 Indexing by column name","text":"column data.frame name, can accessed using $ syntax:","code":"\nnames(a)\n#> [1] \"x\" \"y\" \"z\"\n\na$x\n#> [1] 1 2 3\n\na$y\n#> [1] \"a\" \"b\" \"c\"\n\na$z\n#> [1] TRUE TRUE TRUE\n\n#re-name by assigning a new vector \nnames(a) <- c(\"new_x\",\"Why\",\"Zee\")\na\n#>   new_x Why  Zee\n#> 1     1   a TRUE\n#> 2     2   b TRUE\n#> 3     3   c TRUE\n\na$new_x\n#> [1] 1 2 3\na$Why\n#> [1] \"a\" \"b\" \"c\"\na$Zee\n#> [1] TRUE TRUE TRUE"},{"path":"coding-reference.html","id":"indexing-with-rowscolumns","chapter":"Coding Reference","heading":"0.15.2.3 Indexing with [rows,columns]","text":"Data.frames rows columns, can indexed using [rows,columns] notation, rows vector row numbers, columns vector column numbers","code":"\na\n#>   new_x Why  Zee\n#> 1     1   a TRUE\n#> 2     2   b TRUE\n#> 3     3   c TRUE\n\na[1,] # row 1\n#>   new_x Why  Zee\n#> 1     1   a TRUE\n\na[,1] # column 1\n#> [1] 1 2 3\n\na[1:2,] # rows 1 to 2\n#>   new_x Why  Zee\n#> 1     1   a TRUE\n#> 2     2   b TRUE\n\na[,1:2] # columns 1 to 2\n#>   new_x Why\n#> 1     1   a\n#> 2     2   b\n#> 3     3   c\n\na[1:2,1:2] #rows 1 to 2 and columns 1 to 2\n#>   new_x Why\n#> 1     1   a\n#> 2     2   b\n\na[1:2,'new_x'] # Column names can be used\n#> [1] 1 2"},{"path":"coding-reference.html","id":"row-and-column-binding","chapter":"Coding Reference","heading":"0.15.2.4 row and column binding","text":"possible add rows using rbind(), add columns using cbind().","code":"\n# row bind a copy of a to itself\na\n#>   new_x Why  Zee\n#> 1     1   a TRUE\n#> 2     2   b TRUE\n#> 3     3   c TRUE\na <- rbind(a,a)\ndim(a)\n#> [1] 6 3\n\n# create a new vector, add it as a new column\nmy_new <- c(1,4,3,2,4,5)\na <- cbind(a,my_new)\na\n#>   new_x Why  Zee my_new\n#> 1     1   a TRUE      1\n#> 2     2   b TRUE      4\n#> 3     3   c TRUE      3\n#> 4     1   a TRUE      2\n#> 5     2   b TRUE      4\n#> 6     3   c TRUE      5"},{"path":"coding-reference.html","id":"indexing-and-assignment","chapter":"Coding Reference","heading":"0.15.2.5 Indexing and assignment","text":"elements data.frame can re-assigned your_dataframe[row:position] <- new stuff. generally necessary new elements class original elements","code":"\na\n#>   new_x Why  Zee my_new\n#> 1     1   a TRUE      1\n#> 2     2   b TRUE      4\n#> 3     3   c TRUE      3\n#> 4     1   a TRUE      2\n#> 5     2   b TRUE      4\n#> 6     3   c TRUE      5\n\na[,1] <- 5 #assign column 1 all 5s\n\na$Why <- c(\"new\",\"words\",\"are\",\"going\",\"in\",\"here\")\na\n#>   new_x   Why  Zee my_new\n#> 1     5   new TRUE      1\n#> 2     5 words TRUE      4\n#> 3     5   are TRUE      3\n#> 4     5 going TRUE      2\n#> 5     5    in TRUE      4\n#> 6     5  here TRUE      5\n\na[6,3] <- FALSE # row 6, column 3\na\n#>   new_x   Why   Zee my_new\n#> 1     5   new  TRUE      1\n#> 2     5 words  TRUE      4\n#> 3     5   are  TRUE      3\n#> 4     5 going  TRUE      2\n#> 5     5    in  TRUE      4\n#> 6     5  here FALSE      5"},{"path":"coding-reference.html","id":"logical-indexing-1","chapter":"Coding Reference","heading":"0.15.2.6 Logical indexing","text":"also possible index data.frame logical comparisons. example, following returns rows value column my_new equals 4","code":"\na[a$my_new == 4,]\n#>   new_x   Why  Zee my_new\n#> 2     5 words TRUE      4\n#> 5     5    in TRUE      4"},{"path":"coding-reference.html","id":"lists","chapter":"Coding Reference","heading":"0.15.3 Lists","text":"Lists objects can store arbitrary elements class, including vectors, dataframes, even lists. Lists commonly used store results model, especially model returns many different kinds results different formats.create list three elements, scalar, vector, dataframe.","code":"\nx <- 1\ny <- c(1,2,3,4,5)\nz <- data.frame(a= 1:5, b=1:5, c=1:5)\nmy_list <- list(x, y, z)\n\nmy_list\n#> [[1]]\n#> [1] 1\n#> \n#> [[2]]\n#> [1] 1 2 3 4 5\n#> \n#> [[3]]\n#>   a b c\n#> 1 1 1 1\n#> 2 2 2 2\n#> 3 3 3 3\n#> 4 4 4 4\n#> 5 5 5 5"},{"path":"coding-reference.html","id":"list-indexing","chapter":"Coding Reference","heading":"0.15.3.1 List indexing","text":"Access elements list using [[]]","code":"\nmy_list[[1]]\n#> [1] 1\n\nmy_list[[2]]\n#> [1] 1 2 3 4 5\n\nmy_list[[3]]\n#>   a b c\n#> 1 1 1 1\n#> 2 2 2 2\n#> 3 3 3 3\n#> 4 4 4 4\n#> 5 5 5 5"},{"path":"coding-reference.html","id":"named-elements","chapter":"Coding Reference","heading":"0.15.3.2 Named elements","text":"Elements list can given names, indexed name:","code":"\nx <- 1\ny <- c(1,2,3,4,5)\nz <- data.frame(a= 1:5, b=1:5, c=1:5)\nmy_list <- list(ex = x, why = y,zee=  z)\n\nmy_list\n#> $ex\n#> [1] 1\n#> \n#> $why\n#> [1] 1 2 3 4 5\n#> \n#> $zee\n#>   a b c\n#> 1 1 1 1\n#> 2 2 2 2\n#> 3 3 3 3\n#> 4 4 4 4\n#> 5 5 5 5\n\nmy_list$ex\n#> [1] 1\nmy_list$why\n#> [1] 1 2 3 4 5\nmy_list$zee\n#>   a b c\n#> 1 1 1 1\n#> 2 2 2 2\n#> 3 3 3 3\n#> 4 4 4 4\n#> 5 5 5 5\n\nmy_list[[\"ex\"]]\n#> [1] 1\nmy_list[[\"why\"]]\n#> [1] 1 2 3 4 5\nmy_list[[\"zee\"]]\n#>   a b c\n#> 1 1 1 1\n#> 2 2 2 2\n#> 3 3 3 3\n#> 4 4 4 4\n#> 5 5 5 5"},{"path":"coding-reference.html","id":"addremove-elements-in-lists","chapter":"Coding Reference","heading":"0.15.3.3 Add/Remove elements in lists","text":"possible assign new names elements list, e.g.:","code":"\nmy_list[[\"new_thing\"]] <- 12345\n\nmy_list\n#> $ex\n#> [1] 1\n#> \n#> $why\n#> [1] 1 2 3 4 5\n#> \n#> $zee\n#>   a b c\n#> 1 1 1 1\n#> 2 2 2 2\n#> 3 3 3 3\n#> 4 4 4 4\n#> 5 5 5 5\n#> \n#> $new_thing\n#> [1] 12345\n\n#set an element to NULL removes it\nmy_list[[\"zee\"]] <- NULL\n\nmy_list\n#> $ex\n#> [1] 1\n#> \n#> $why\n#> [1] 1 2 3 4 5\n#> \n#> $new_thing\n#> [1] 12345"},{"path":"coding-reference.html","id":"logic","chapter":"Coding Reference","heading":"0.16 Logic","text":"Logic statements used compare two things, two sets things. output comparison TRUE FALSE statment. many things compared , output many TRUE FALSE statements comparison","code":""},{"path":"coding-reference.html","id":"equal-to","chapter":"Coding Reference","heading":"0.16.1 equal to ==","text":"","code":"\n1==1 # is 1 equal to 1?\n#> [1] TRUE\n1==2 # is 1 equal to 2?\n#> [1] FALSE\n\nc(1,2,3) == c(2,1,3) # compares each element with each element\n#> [1] FALSE FALSE  TRUE\n1 == c(2,1,3)\n#> [1] FALSE  TRUE FALSE"},{"path":"coding-reference.html","id":"not-equal-to","chapter":"Coding Reference","heading":"0.16.2 not equal to !=","text":"","code":"\n1!=1 # is 1 equal to 1?\n#> [1] FALSE\n1!=2 # is 1 equal to 2?\n#> [1] TRUE\n\nc(1,2,3) != c(2,1,3) # compares each element with each element\n#> [1]  TRUE  TRUE FALSE\n1 != c(2,1,3)\n#> [1]  TRUE FALSE  TRUE"},{"path":"coding-reference.html","id":"greater-than-less-than","chapter":"Coding Reference","heading":"0.16.3 Greater than/ less than","text":"","code":"\n\n1 > 1 # is 1 greater than 1?\n#> [1] FALSE\n5 > 1 # is 5 greater than 1?\n#> [1] TRUE\n3 < 2 # is 3 less than 2?\n#> [1] FALSE\n3 < 1 # is 3 less than 1?\n#> [1] FALSE\n\nc(1,2,3) > c(2,1,3) # ask the question element by element\n#> [1] FALSE  TRUE FALSE\nc(1,2,3) < c(2,1,3)\n#> [1]  TRUE FALSE FALSE\n\n2 > c(1,2,3) # is greater than each of the numbers\n#> [1]  TRUE FALSE FALSE"},{"path":"coding-reference.html","id":"section","chapter":"Coding Reference","heading":"0.16.4 >= <=","text":"something greater equal something else","code":"\n1 >= 1 # is 1 greater than 1?\n#> [1] TRUE\n5 >= 1 # is 5 greater than 1?\n#> [1] TRUE\n3 <= 2 # is 3 less than 2?\n#> [1] FALSE\n3 <= 1 # is 3 less than 1?\n#> [1] FALSE\n\nc(1,2,3) >= c(2,1,3) # ask the question element by element\n#> [1] FALSE  TRUE  TRUE\nc(1,2,3) <= c(2,1,3)\n#> [1]  TRUE FALSE  TRUE\n\n2 >= c(1,2,3) # is greater than each of the numbers\n#> [1]  TRUE  TRUE FALSE"},{"path":"coding-reference.html","id":"and","chapter":"Coding Reference","heading":"0.16.5 AND","text":"ampersand & used , allows use evaluate whether two properties TRUE.","code":"\n# is 16 divisible by 4 AND 8\n16%%4 == 0 & 16%%8 ==0\n#> [1] TRUE\n\n# is 16 divisible by 4 AND 3\n16%%4 == 0 & 16%%3 ==0\n#> [1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16%%4 == 0 & 16%%8 ==0 & 16%%2 ==0\n#> [1] TRUE"},{"path":"coding-reference.html","id":"or","chapter":"Coding Reference","heading":"0.16.6 OR","text":"| used , allows use evaluate least one properties TRUE.","code":"\n# is 16 divisible by 4 OR 8\n16%%4 == 0 | 16%%8 ==0\n#> [1] TRUE\n\n# is 16 divisible by 4 OR 3\n# it is divisible by 4, so the answer is TRUE\n# because at least one of the comparisons is TRUE\n16%%4 == 0 | 16%%3 ==0\n#> [1] TRUE"},{"path":"coding-reference.html","id":"true-false","chapter":"Coding Reference","heading":"0.16.7 TRUE FALSE","text":"R returns values TRUE FALSE, return logical variable. also treats TRUE 1, FALSE 0. example see possible sum logical variable multiple TRUE FALSE entries.","code":"\nc(1,2,3) == c(1,2,3)\n#> [1] TRUE TRUE TRUE\nsum(c(1,2,3) == c(1,2,3))\n#> [1] 3\n\nc(1,2,3) == c(2,1,3)\n#> [1] FALSE FALSE  TRUE\nsum(c(1,2,3) == c(2,1,3))\n#> [1] 1"},{"path":"coding-reference.html","id":"if-else","chapter":"Coding Reference","heading":"0.17 IF ELSE","text":"roller-coaster operator checks people taller line see can ride coaster. ELSE control structure. person taller line, can go ride; ELSE (otherwise) person can go ride.words, situation X, something; ELSE (situation X), something different.ELSE statements let us specify conditions specific actions taken. Generally, ELSE statements used inside loops (, , repeat loops), step iteration loop, want check something, something.Consider :Normally find ELSE loop like :can multiple conditions statements. See next section loops info using loops.","code":"\na <- 1 # define a to be a 1\nif(a==1){  \n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n#> [1] 1\n\n\na <- 2 # define a to be a 1\nif(a==1){  \n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n#> [1] \"A is not 1\"\na <- c(1,0,1,0,0,0,1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor(i in a){\n  if(i == 1){\n    print(\"I'm a 1\") # what to do when i is 1\n  } else {\n    print(\"I'm not a 1\") # what to do when i is not 1\n  }\n}\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\na <- c(1,2,3,1,2,0,1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor(i in a){\n  if(i == 1){\n    print(\"I'm a 1\") # what to do when i is 1\n  } else if (i==2){\n    print(\"I'm a 2\") # what to do when i is 2\n  } else if (i==3){\n    print(\"I'm a 3\") # what to do when i is 3\n  } else {\n    print(\"I'm not any of the above\") #what to do when none are true\n  }\n}\n#> [1] \"I'm a 1\"\n#> [1] \"I'm a 2\"\n#> [1] \"I'm a 3\"\n#> [1] \"I'm a 1\"\n#> [1] \"I'm a 2\"\n#> [1] \"I'm not any of the above\"\n#> [1] \"I'm a 1\""},{"path":"coding-reference.html","id":"loops","chapter":"Coding Reference","heading":"0.18 Loops","text":"Check R help Control Flow ?Control.(){}\n(loop control){something iteration}Loop control defined parentheses. name iterator placed left (can assigned name want, need declared advance). execution loop, iterator takes values inside vector placed right side . Specifically, following happening.Loop steps:\n1. iterator <- vector[1]\n2. iterator <- vector[2]\n3. iterator <- vector[3]\n4. etc.loop automatically stop reaches last item vector. loop can stopped using break command.","code":"\nfor(iterator in vector){\n  #do something\n}\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5){\n  print(\"hello\")\n}\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n# show the value of i each step of the loop\nfor(i in 1:5){\n  print(i)\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n# define the vector to loop over in advance\nx <- 1:5\nfor(i in x){\n  print(i)\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n# Reminder that i becomes the next value in the vector\n# your vector can have any order \nmy_sequence <- c(1,5,2,3,4)\nfor(i in my_sequence){\n  print(i)\n}\n#> [1] 1\n#> [1] 5\n#> [1] 2\n#> [1] 3\n#> [1] 4\n# index vector does not need to be numbers\nmy_things <- c(\"A\",\"B\",\"C\",\"D\")\nfor(i in my_things){\n  print(i)\n}\n#> [1] \"A\"\n#> [1] \"B\"\n#> [1] \"C\"\n#> [1] \"D\""},{"path":"coding-reference.html","id":"breaking-a-loop","chapter":"Coding Reference","heading":"0.18.1 Breaking a loop","text":"break stops loop. Used logical statements define conditions necessary cause break.","code":"\nfor(i in 1:10){\n  if(i <5){\n    print(i)\n  } else{\n    break\n  }\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4"},{"path":"coding-reference.html","id":"while-loops","chapter":"Coding Reference","heading":"0.18.2 While loops","text":"loops run logical condition met. iterator, just logic statement needs met.one prints less 6. soon becomes “less 6,” loop stops. Critically, inside loop, value increases iteration.","code":"\ni <- 1 # create an variable\nwhile (i < 6) {\n  print(i)\n  i = i+1 #add one eachs step of the loop\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5"},{"path":"coding-reference.html","id":"repeat-loops","chapter":"Coding Reference","heading":"0.18.3 Repeat loops","text":"Similar , let’s things condition met.","code":"\ni<-0\nrepeat{\n  i<-i+1\n  print(i)\n  if(i==5){\n    break\n  }\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5"},{"path":"coding-reference.html","id":"examples","chapter":"Coding Reference","heading":"0.18.4 Examples","text":"Braces needed one lineUsing value iterator assign values systematically another variable.Make counter, need oneNesting loopsbreak exits immediate loop","code":"\nfor(i in 1:5) print(i)\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n# put 1 into the first five positions of x\nx <- c() # create empty vector\nfor(i in 1:5){\n  x[i] <- 1  # assign 1 to the ith slot in x\n}\nx\n#> [1] 1 1 1 1 1\n\n# put the numbers 1-5 in the first 5 positions of x\nx <-c()\nfor(i in 1:5){\n  x[i] <- i\n}\nx\n#> [1] 1 2 3 4 5\na <- c(1,4,3,5,7,6,8,2)\nodd <- c()\ncounter <- 0\nfor(i in a){  # i will the values of a in each position\n  counter <- counter+1\n  if(i%%2 != 0){\n    odd[counter] <- \"odd\"\n  } else {\n    odd[counter] <- \"even\"\n  }\n}\nodd\n#> [1] \"odd\"  \"even\" \"odd\"  \"odd\"  \"odd\"  \"even\" \"even\" \"even\"\n\n# An alternative strategy\n\na <- c(1,4,3,5,7,6,8,2)\nodd <- c()\n# 1:length(a) creates a sequence from 1 to length\nfor(i in 1:length(a)){  \n  if(a[i]%%2 != 0){\n    odd[i] <- \"odd\"\n  } else {\n    odd[i] <- \"even\"\n  }\n}\nodd\n#> [1] \"odd\"  \"even\" \"odd\"  \"odd\"  \"odd\"  \"even\" \"even\" \"even\"\n\nfor(i in 1:5){\n  for(j in 1:5){\n   print(c(i,j))\n  }\n}\n#> [1] 1 1\n#> [1] 1 2\n#> [1] 1 3\n#> [1] 1 4\n#> [1] 1 5\n#> [1] 2 1\n#> [1] 2 2\n#> [1] 2 3\n#> [1] 2 4\n#> [1] 2 5\n#> [1] 3 1\n#> [1] 3 2\n#> [1] 3 3\n#> [1] 3 4\n#> [1] 3 5\n#> [1] 4 1\n#> [1] 4 2\n#> [1] 4 3\n#> [1] 4 4\n#> [1] 4 5\n#> [1] 5 1\n#> [1] 5 2\n#> [1] 5 3\n#> [1] 5 4\n#> [1] 5 5\n\n# example of using nested loops to fill the contents\n# of a matrix\n\nmy_matrix <- matrix(0,ncol=5,nrow=5)\nfor(i in 1:5){\n  for(j in 1:5){\n   my_matrix[i,j] <- i*j\n  }\n}\nmy_matrix\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    1    2    3    4    5\n#> [2,]    2    4    6    8   10\n#> [3,]    3    6    9   12   15\n#> [4,]    4    8   12   16   20\n#> [5,]    5   10   15   20   25\n# the inside loop stops when i+j is greater than 5\n# the outside loop keeps going\n\nsum_of_i_j <- c()\ncounter <- 0\nfor(i in 1:5){\n  for(j in 1:5){\n    counter <- counter+1\n    sum_of_i_j[counter] <- i+j\n    if(i+j > 5){\n      break\n    }\n  }\n}\nsum_of_i_j\n#>  [1] 2 3 4 5 6 3 4 5 6 4 5 6 5 6 6"},{"path":"coding-reference.html","id":"functions","chapter":"Coding Reference","heading":"0.19 Functions","text":"section discusses syntax writing custom functions R.","code":""},{"path":"coding-reference.html","id":"function-syntax","chapter":"Coding Reference","heading":"0.19.1 function syntax","text":"","code":"\nfunction_name <- function(input1,input2){\n  #code here\n  return(something)\n}"},{"path":"coding-reference.html","id":"example-functions","chapter":"Coding Reference","heading":"0.19.2 example functions","text":"function input (). Whenever run function, simply return whatever placed inside return statement.function simply takes input, returns input without modifying .function takes input, creates internal variable called temp assigns input+1. contents temp returned. Note , checking input, return erro input character (can’t add one character R)function adds input checking. add one input numeric type. Otheriwse, use stop() return error message consoleA function three inputs","code":"\n# define the function\nprint_hello_world <- function(){\n  return(print(\"hello world\"))\n}\n\n# use the function\nprint_hello_world()\n#> [1] \"hello world\"\nreturn_input <- function(input){\n  return(input)\n}\n\n# the variable input is assigned a 1\n# then we return(input), which will result in a 1\n# because the function internally assigns 1 to the input\nreturn_input(1)\n#> [1] 1\n\na <- \"something\"\nreturn_input(a)\n#> [1] \"something\"\nadd_one <- function(input){\n  temp <- input+1\n  return(temp)\n}\n\nadd_one(1)\n#> [1] 2\nadd_one(\"a\")\n#> Error in input + 1: non-numeric argument to binary operator\nadd_one <- function(input){\n  if(class(input) == \"numeric\"){\n    temp <- input+1\n    return(temp)\n  } else {\n    return(stop(\"input must be numeric\"))\n  }\n}\n\nadd_one(1)\n#> [1] 2\nadd_one(\"a\")\n#> Error in add_one(\"a\"): input must be numeric\nadd_multiply <- function(input, x_plus,x_times){\n  temp <- (input+x_plus)*x_times\n  return(temp)\n}\n\n# input is 1\n# x_plus <- 2\n# x_times <- 3\n# will return (1+2)*3 = 9\nadd_multiply(1,2,3)\n#> [1] 9"},{"path":"coding-reference.html","id":"tidyverse","chapter":"Coding Reference","heading":"0.20 Tidyverse","text":"tidyverse set popular R packages convenient many aspects data-analysis. tidyverse packages can installed one go:","code":"\ninstall.packages(\"tidyverse\")"},{"path":"coding-reference.html","id":"dplyr","chapter":"Coding Reference","heading":"0.21 dplyr","text":"dplyr package several useful functions manipulating summarizing data.frames. illustrate dplyr functionality first create small fake data.frame. link dplyr cheatsheet","code":"\nsubjects <- rep(1:10)\ngrades <- rnorm(n = 10, mean = 65, sd = 5)\nage <- sample(18:20,10,replace=TRUE)\nlikes_chocolate <- sample(c(TRUE,FALSE), 10, replace=TRUE)\nfavorite_color <- sample(c(\"r\",\"o\",\"y\",\"g\",\"b\",\"i\",\"v\"), 10, replace=TRUE)\n\nfake_data <- data.frame(subjects,\n                        grades,\n                        age,\n                        likes_chocolate,\n                        favorite_color)\n\nknitr::kable(head(fake_data))"},{"path":"coding-reference.html","id":"group_by-and-summarize","chapter":"Coding Reference","heading":"0.21.1 group_by and summarize","text":"group_by() allows specify columns split groups analysis, groups levels column (e.g., unique entries column)summarize() conducts analysis group identified group_by step. analysis defined variable names, supplying function computes value given name measurement variable.","code":"\nlibrary(dplyr)\n\nfake_data %>%\n  group_by(likes_chocolate) %>%\n  summarize(mean_grade = mean(grades),\n            sd_grad = sd(grades))\n#> # A tibble: 2 x 3\n#>   likes_chocolate mean_grade sd_grad\n#>   <lgl>                <dbl>   <dbl>\n#> 1 FALSE                 66.5    6.59\n#> 2 TRUE                  67.8    4.81\n\nfake_data %>%\n  group_by(likes_chocolate,age) %>%\n  summarize(mean_grade = mean(grades),\n            sd_grad = sd(grades))\n#> # A tibble: 5 x 4\n#> # Groups:   likes_chocolate [2]\n#>   likes_chocolate   age mean_grade sd_grad\n#>   <lgl>           <int>      <dbl>   <dbl>\n#> 1 FALSE              18       58.8   NA   \n#> 2 FALSE              19       68.4    5.78\n#> 3 TRUE               18       65.5    5.04\n#> 4 TRUE               19       65.1   NA   \n#> 5 TRUE               20       71.4    4.75"},{"path":"coding-reference.html","id":"filter","chapter":"Coding Reference","heading":"0.21.2 filter","text":"Filter rows depending logical comparisons","code":"\nfake_data %>%\n  filter(grades < 65)\n#>   subjects   grades age likes_chocolate favorite_color\n#> 1        2 63.57233  19           FALSE              y\n#> 2        3 61.90138  18            TRUE              o\n#> 3        5 58.80694  18           FALSE              r\n#> 4        8 63.26356  19           FALSE              y\n\nfake_data %>%\n  filter(grades < 65,\n         likes_chocolate == TRUE)\n#>   subjects   grades age likes_chocolate favorite_color\n#> 1        3 61.90138  18            TRUE              o"},{"path":"coding-reference.html","id":"select","chapter":"Coding Reference","heading":"0.21.3 select","text":"Select specific columns","code":"\nfake_data %>%\n  select(grades)\n#>      grades\n#> 1  69.03042\n#> 2  63.57233\n#> 3  61.90138\n#> 4  74.80167\n#> 5  58.80694\n#> 6  68.09122\n#> 7  73.86248\n#> 8  63.26356\n#> 9  72.93247\n#> 10 65.12974\n\nfake_data %>%\n  select(grades,likes_chocolate)\n#>      grades likes_chocolate\n#> 1  69.03042            TRUE\n#> 2  63.57233           FALSE\n#> 3  61.90138            TRUE\n#> 4  74.80167            TRUE\n#> 5  58.80694           FALSE\n#> 6  68.09122            TRUE\n#> 7  73.86248           FALSE\n#> 8  63.26356           FALSE\n#> 9  72.93247           FALSE\n#> 10 65.12974            TRUE"},{"path":"coding-reference.html","id":"mutate","chapter":"Coding Reference","heading":"0.21.4 mutate","text":"mutate() can add column","code":"\nfake_data <- fake_data %>%\n  mutate(new_thing = 0)\n\nfake_data\n#>    subjects   grades age likes_chocolate favorite_color new_thing\n#> 1         1 69.03042  18            TRUE              g         0\n#> 2         2 63.57233  19           FALSE              y         0\n#> 3         3 61.90138  18            TRUE              o         0\n#> 4         4 74.80167  20            TRUE              y         0\n#> 5         5 58.80694  18           FALSE              r         0\n#> 6         6 68.09122  20            TRUE              v         0\n#> 7         7 73.86248  19           FALSE              b         0\n#> 8         8 63.26356  19           FALSE              y         0\n#> 9         9 72.93247  19           FALSE              y         0\n#> 10       10 65.12974  19            TRUE              y         0"},{"path":"coding-reference.html","id":"ggplot2","chapter":"Coding Reference","heading":"0.22 ggplot2","text":"ggplot2 library created Hadley Wickham plotting graphing results, refers “grammar graphics,” standardized syntax organization graphing.","code":""},{"path":"coding-reference.html","id":"ggplot2-additional-resources","chapter":"Coding Reference","heading":"0.22.1 ggplot2 additional resources","text":"https://ggplot2.tidyverse.orghttps://r4ds..co.nz/data-visualisation.htmlhttps://ggplot2-book.orghttp://r-statistics.co/ggplot2-Tutorial--R.htmlhttps://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html","code":""},{"path":"coding-reference.html","id":"add-on-packages","chapter":"Coding Reference","heading":"0.22.1.1 Add-on packages","text":"https://www.ggplot2-exts.org repository 50+ add packages ggplot2https://gganimate.com\nallows create animated .gifs ggplots\nmade bunch animated gifs statistics textbook. along code https://crumplab.github.io/statistics/gifs.html\nallows create animated .gifs ggplotsI made bunch animated gifs statistics textbook. along code https://crumplab.github.io/statistics/gifs.htmlggrepel allows repel overlapping text labels away .esquisse GUI (graphic user interface) allows make ggplot graphs using drag-drop, clickable optionsggedit similar , clickable editing ggplot graphsplotly package similar ggplot, makes whole variety graphs, mainly use websites. Allows interactive graphs.\nexample, used plotly publications website, hover dots, info pops https://crumplab.github.io/Publications.html.\nexample, used plotly publications website, hover dots, info pops https://crumplab.github.io/Publications.html.ggpubr (install CRAN), many useful things, including ggarrange function allows knit multiple plots togetherggthemes extra themes, scales, geoms","code":""},{"path":"coding-reference.html","id":"example-code","chapter":"Coding Reference","heading":"0.22.2 Example code","text":"Remember load ggplot2 library use ggplot2.","code":"\nlibrary(ggplot2)"},{"path":"coding-reference.html","id":"scatterplot","chapter":"Coding Reference","heading":"0.22.3 Scatterplot","text":"","code":"\n# Create dataframe\na <- c(1,2,3,2,3,4,5,4)\nb <- c(4,3,4,3,2,1,2,3)\nplot_df <- data.frame(a,b)\n\n# basic scatterplot\nggplot(plot_df, aes(x=a,y=b))+\n  geom_point()\n\n# customize, add regression line\nggplot(plot_df, aes(x=a,y=b))+\n  geom_point(size=2)+\n  geom_smooth(method=lm)+\n  coord_cartesian(xlim=c(0,7),ylim=c(0,10))+\n  xlab(\"x-axis label\")+\n  ylab(\"y-axis label\")+\n  ggtitle(\"I made a scatterplot\")+\n  theme_classic(base_size=12)+\n  theme(plot.title = element_text(hjust = 0.5))"},{"path":"coding-reference.html","id":"bar-graph","chapter":"Coding Reference","heading":"0.22.4 bar graph","text":"1 factor2 factor3 factor","code":"\n#Create a dataframe\nfactor_one <- as.factor(c(\"A\",\"B\",\"C\"))\ndv_means <- c(20,30,40)\ndv_SEs   <- c(4,3.4,4)\nplot_df <- data.frame(factor_one,\n                      dv_means,\n                      dv_SEs)\n\n# basic bar graph\n\nggplot(plot_df, aes(x=factor_one,y=dv_means))+\n  geom_bar(stat=\"identity\")\n\n# adding error bars, customizing\n\nggplot(plot_df, aes(x=factor_one,y=dv_means))+\n  geom_bar(stat=\"identity\")+\n  geom_errorbar(aes(ymin=dv_means-dv_SEs,\n                    ymax=dv_means+dv_SEs),\n                width=.2)+\n  coord_cartesian(ylim=c(0,100))+\n  xlab(\"x-axis label\")+\n  ylab(\"y-axis label\")+\n  ggtitle(\"I made a bar graph\")+\n  theme_classic(base_size=12)+\n  theme(plot.title = element_text(hjust = 0.5))\n#Create a dataframe\nfactor_one <- rep(as.factor(c(\"A\",\"B\",\"C\")),2)\nfactor_two <- rep(as.factor(c(\"IIA\",\"IIB\")),3)\ndv_means <- c(20,30,40,20,40,40)\ndv_SEs   <- c(4,3.4,4,3,2,4)\nplot_df <- data.frame(factor_one,\n                      factor_two,\n                      dv_means,\n                      dv_SEs)\n\n# basic bar graph\n\nggplot(plot_df, aes(x=factor_one,y=dv_means,\n                    group=factor_two,\n                    color=factor_two))+\n  geom_bar(stat=\"identity\", position=\"dodge\")\n\n# adding error bars, customizing\n\nggplot(plot_df, aes(x=factor_one,y=dv_means,\n                    group=factor_two,\n                    color=factor_two,\n                    fill=factor_two))+\n  geom_bar(stat=\"identity\", position=\"dodge\")+\n  geom_errorbar(aes(ymin=dv_means-dv_SEs,\n                    ymax=dv_means+dv_SEs),\n                position=position_dodge(width=0.9),\n                width=.2,\n                color=\"black\")+\n  coord_cartesian(ylim=c(0,100))+\n  xlab(\"x-axis label\")+\n  ylab(\"y-axis label\")+\n  ggtitle(\"Bar graph 2 factors\")+\n  theme_classic(base_size=12)+\n  theme(plot.title = element_text(hjust = 0.5))\n#Create a dataframe\nfactor_one <- rep(rep(as.factor(c(\"A\",\"B\",\"C\")),2),2)\nfactor_two <- rep(rep(as.factor(c(\"IIA\",\"IIB\")),3),2)\nfactor_three <- rep(as.factor(c(\"IIIA\",\"IIIB\")),each=6)\ndv_means <- c(20,30,40,20,40,40,\n              10,20,50,50,10,10)\ndv_SEs   <- c(4,3.4,4,3,2,4,\n              1,2,1,2,3,2)\nplot_df <- data.frame(factor_one,\n                      factor_two,\n                      factor_three,\n                      dv_means,\n                      dv_SEs)\n\n# basic bar graph\n\nggplot(plot_df, aes(x=factor_one,y=dv_means,\n                    group=factor_two,\n                    color=factor_two))+\n  geom_bar(stat=\"identity\", position=\"dodge\")+\n  facet_wrap(~factor_three)"},{"path":"coding-reference.html","id":"line-graph","chapter":"Coding Reference","heading":"0.22.5 Line Graph","text":"1 factor2 factor","code":"\n#Create a dataframe\nfactor_one <- as.factor(c(\"A\",\"B\",\"C\"))\ndv_means <- c(20,30,40)\ndv_SEs   <- c(4,3.4,4)\nplot_df <- data.frame(factor_one,\n                      dv_means,\n                      dv_SEs)\n\n# basic line graph\n\nggplot(plot_df, aes(x=factor_one,y=dv_means, group=1))+\n  geom_point()+\n  geom_line()\n\n# adding error bars, customizing\n\nggplot(plot_df, aes(x=factor_one,y=dv_means, group=1))+\n  geom_point()+\n  geom_line()+\n  geom_errorbar(aes(ymin=dv_means-dv_SEs,\n                    ymax=dv_means+dv_SEs),\n                width=.2)+\n  coord_cartesian(ylim=c(0,100))+\n  xlab(\"x-axis label\")+\n  ylab(\"y-axis label\")+\n  ggtitle(\"I made a line graph\")+\n  theme_classic(base_size=12)+\n  theme(plot.title = element_text(hjust = 0.5))\n#Create a dataframe\nfactor_one <- rep(as.factor(c(\"A\",\"B\",\"C\")),2)\nfactor_two <- rep(as.factor(c(\"IIA\",\"IIB\")),3)\ndv_means <- c(20,30,40,20,40,40)\ndv_SEs   <- c(4,3.4,4,3,2,4)\nplot_df <- data.frame(factor_one,\n                      factor_two,\n                      dv_means,\n                      dv_SEs)\n\n# basic line graph\n\nggplot(plot_df, aes(x=factor_one,y=dv_means,\n                    group=factor_two,\n                    color=factor_two,\n                    linetype=factor_two))+\n  geom_point()+\n  geom_line()"},{"path":"coding-reference.html","id":"histogram","chapter":"Coding Reference","heading":"0.22.6 Histogram","text":"base R","code":"\na<-rnorm(100,0,1)\nhist(a)\nscore <- rnorm(100,0,1)\nn <- 1:100\nplot_df <- data.frame(score,n)\n\nggplot(plot_df, aes(x=score))+\n  geom_histogram(bins=10,\n                 color=\"white\")"},{"path":"coding-reference.html","id":"knitr","chapter":"Coding Reference","heading":"0.23 knitr","text":"knitr package used compile R markdown documents formats html (webpages) pdf.","code":""},{"path":"coding-reference.html","id":"knitting-to-pdf","chapter":"Coding Reference","heading":"0.23.1 knitting to pdf","text":"latex installation required order knit pdf. Latex also free cross-platform, however complete installation can quite large.think advice Frederick Aust (author papaja package) installing latex worth following:https://crsh.github.io/papaja_man/introduction.html#getting-startedBasically, advice install complete tex distribution (follow links), use tinytex package R. tinytex package sufficient knitting pdf duties.Install tinytex library:Run command installing library","code":"install.packages(\"tinytex\")tinytex::install_tex()"},{"path":"coding-reference.html","id":"knitr-options","chapter":"Coding Reference","heading":"0.23.2 knitr options","text":"create new R Markdown document see following code chunk underneath yaml, beginning document. usually looks like :chunk named setup, printed output, controls global setup options whole document. option set applies remaining code chunks create. ’s way setting defaults.helpful defaults can add. turn option TRUE, turn FALSE.echo=TRUE sets default print remaining code blocks output, FALSE sets default print code blockswarning = FALSE turns printing warningsmessage = FALSE turns printing messages, commonly occur load package, receive message package loadedeval = FALSE sets default evaluate code chunk R Code. run code block, code block still print echo=TRUEerror=TRUE normally knit fails error code. set error=TRUE knit complete, return error message code blocks errors.","code":"```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n``````{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE,\n                      warning = FALSE,\n                      message = FALSE, \n                      eval = FALSE,\n                      error = TRUE)\n```"},{"path":"coding-reference.html","id":"knitr-figure-output-defaults","chapter":"Coding Reference","heading":"0.23.3 knitr figure output defaults","text":"following setup options useful figure output.fig.width = 3 sets default width inches figuresfig.height = 3 sets default height inches figuresfig.path = \"myfigs/\" defines folder figure files saved. relative current working directoydev = c(\"pdf\", \"png\") tells knitr output .png, .pdf versions figure. .pdf contains vector graphics, meaning figure can resized without pixelization.","code":"```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE,\n                      fig.width = 3,\n                      fig.height = 3,\n                      fig.path = \"myfigs/\",\n                      dev = c(\"pdf\", \"png\"))\n```"},{"path":"coding-reference.html","id":"figure-output-per-code-block","chapter":"Coding Reference","heading":"0.23.4 figure output per code block","text":"can set options remaining code blocks individually. overrule default options specify setup chunk.","code":"```{r figurename, fig.width =5, fig.height =7}\n\n# some code that generates a figure\n\n```"},{"path":"coding-reference.html","id":"tables","chapter":"Coding Reference","heading":"0.24 tables","text":"several useful (incredible even) packages making tables R. :knitr package ’s kable function (Create tables Latex, HTML, Markdown)xtable package, lots functions tables. xtable examples xtablekableExtra lots additional table functionalitytangram grammar tables approachpapaja apa-style tables","code":""},{"path":"coding-reference.html","id":"important-table-info","chapter":"Coding Reference","heading":"0.24.1 Important table info","text":"Two things note, tables can difficult, different output formats.Tables R can difficult. example, comfortable making tables Excel, R much difficult comparison. Excel, easy enter information cell, merge cells, add kind formatting want anywhere, just clicking around making changes. R, every detail table specified script. table packages make simple tables easy (hurray!), make complicated tables possible (also good), necessarilly easy.Tables R can difficult. example, comfortable making tables Excel, R much difficult comparison. Excel, easy enter information cell, merge cells, add kind formatting want anywhere, just clicking around making changes. R, every detail table specified script. table packages make simple tables easy (hurray!), make complicated tables possible (also good), necessarilly easy.R can output tables many formats including HTML web, Latex .pdf, formats (e.g., word, markdown). Sometimes (depending functions using) run issues outputting tables different formats. , take steps ensure outputting table format want.R can output tables many formats including HTML web, Latex .pdf, formats (e.g., word, markdown). Sometimes (depending functions using) run issues outputting tables different formats. , take steps ensure outputting table format want.","code":""},{"path":"coding-reference.html","id":"knitrkable","chapter":"Coding Reference","heading":"0.24.2 knitr::kable","text":"kable() function inside knitr package. use need load knitr library, can use knitr::kable(), tells R find kable inside knitr package haven’t loaded knitr using library(knitr).kable() great quickly rendering data frames nice tables without much hassle.","code":"\ndf <- data.frame(A=1,\n                 B=2,\n                 C=3,\n                 D=4)\nknitr::kable(df)"},{"path":"coding-reference.html","id":"xtable","chapter":"Coding Reference","heading":"0.24.3 xtable","text":"Look xtable examples document info. https://cran.r-project.org/web/packages/xtable/vignettes/xtableGallery.pdf","code":"\nlibrary(xtable) # load xtable\ndata(tli) # loads a sample data frame\n\n# conduct an ANOVA\n fm1 <- aov(tlimth ~ sex + ethnicty + grade + disadvg, data = tli)\n \n# print the table for HTML using xtable and kable together\nknitr::kable(xtable(fm1))\n\n# Note this will print a table in latex for .pdf\n# xtable(fm1)"},{"path":"coding-reference.html","id":"kableextra","chapter":"Coding Reference","heading":"0.24.4 kableExtra","text":"many great things kableExtra. One great thing kableExtra unique table options html formatting .pdf latex. example, interactive tables possible html, .pdf. Another great thing ability add rows headers top . example, data.frames R one row headers columns, kableExtra can add top.HTML info kableExtraLatex info (pdf) kableExtra","code":"\nlibrary(kableExtra)\ndf <- data.frame(A=1,\n                 B=2,\n                 C=3,\n                 D=4)\nkable(df) %>%\n  kable_styling(\"striped\") %>%\n  add_header_above(c(\"Group 1\" = 2, \"Group 2\" = 2))"},{"path":"coding-reference.html","id":"tangram","chapter":"Coding Reference","heading":"0.24.5 tangram","text":"package implements grammar tables. Similar concept behind ggplot2, implements grammar graphics figures.tangram githubtangram html examples","code":""},{"path":"coding-reference.html","id":"papaja","chapter":"Coding Reference","heading":"0.25 papaja","text":"papaja package rendering APA-style manuscripts pdf using R Markdown. learn papaja class. One feature papaja supports APA-style tables.papaja documentationpapaja APA tables","code":""},{"path":"coding-reference.html","id":"installing-papaja","chapter":"Coding Reference","heading":"0.25.1 Installing papaja","text":"papaja requires latex installation order compile .Rmd documents pdf. papaja documentation provides guidance installing latex papaja, see getting started section.can also watch video, goes steps :","code":"\n## install tinytex\nif(!\"tinytex\" %in% rownames(installed.packages())) install.packages(\"tinytex\")\n\n## initialize tinytex\ntinytex::install_tinytex()\n\n# Install devtools package if necessary\nif(!\"devtools\" %in% rownames(installed.packages())) install.packages(\"devtools\")\n\n# Install the stable development verions from GitHub\ndevtools::install_github(\"crsh/papaja\")"},{"path":"coding-reference.html","id":"vectorized-approaches","chapter":"Coding Reference","heading":"0.26 Vectorized approaches","text":"Loops common tool something many times. R can accomplish goal “something many times” without loops, using vectorized approach.","code":""},{"path":"coding-reference.html","id":"basic-examples","chapter":"Coding Reference","heading":"0.26.1 Basic examples","text":"Let’s take close look basic differences using loop, using R’s vectorized approachConsider problem adding single number numbers vector.adding two vectors together, add first two numbers together, second two numbers etc.comparing identity elements two vectors see ?","code":"\nnums <- c(1,2,3,4)\n\n# vectorized approach\n# R automatically adds 1 to all of the numbers\nnums+1\n#> [1] 2 3 4 5\n\n# loop approach\n# much longer to write out\nfor(i in 1:length(nums)){\n  nums[i] <- nums[i]+1\n}\nnums\n#> [1] 2 3 4 5\nA <- c(1,2,3,4)\nB <- c(1,2,3,4)\n\n# vectorized approach\nA+B\n#> [1] 2 4 6 8\n\n# loop approach\nthe_sum <-c()\nfor(i in 1:length(A)){\n  the_sum[i] <- A[i]+B[i]\n}\nthe_sum\n#> [1] 2 4 6 8\nA <- c(\"c\",\"e\",\"f\",\"g\")\nB <- c(\"d\",\"e\",\"f\",\"g\")\n\n#vectorized approach\nA==B\n#> [1] FALSE  TRUE  TRUE  TRUE\n\n# loop approach\ncompared <-c()\nfor(i in 1:length(A)){\n  if(A[i]==B[i]){\n    compared[i] <- TRUE\n  } else {\n    compared[i] <- FALSE\n  }\n}\ncompared\n#> [1] FALSE  TRUE  TRUE  TRUE"},{"path":"coding-reference.html","id":"replicate","chapter":"Coding Reference","heading":"0.26.2 Replicate","text":"replicate(n, expr) allows repeat function many times, return answer vectorThe next example shows write function something, use function inside replicate repeat function many times.example, write function run one-sample t-test random sample drawn normal distribution","code":"\n# returns 1 randomly sampled number from 1 to 10\nsample(1:10,1)\n#> [1] 1\n\n# let's repeat the above 10 times using replicate\nreplicate(10,sample(1:10,1))\n#>  [1]  5  1  9  1  7  4  2 10  2  8\nttest_result <- function(){\n  sample <- rnorm(10,0,1)\n  t_out <- t.test(sample, mu=0)\n  return(t_out$statistic)\n}\n\n# get 10 t-values from repeating the above 10 times\nreplicate(10, ttest_result() )\n#>          t          t          t          t          t          t          t \n#>  0.7462134  0.1265805  1.6177355  0.3190185 -0.3212202 -0.1425219  0.6180752 \n#>          t          t          t \n#> -0.2880227  0.2400779 -0.3862252"},{"path":"coding-reference.html","id":"apply-family","chapter":"Coding Reference","heading":"0.26.3 apply family","text":"apply family functions can used “apply” function across elements object. general overview can found hereSome apply functions include: apply(), lapply, sapply.","code":""},{"path":"coding-reference.html","id":"lapply-and-sapply","chapter":"Coding Reference","heading":"0.26.4 lapply and sapply","text":"part definition lapply help file:lapply returns list length X, element result applying FUN corresponding element X.Let’s see examples:Let’s apply function elements vector. keep things simple, function add 1 numberAn alternative syntax lapply sapply let’s define function want apply inside lapply sapply function.case, element vector some_numbers become x value function.","code":"\nsome_numbers <- c(1,2,3,4)\n\nadd_one <- function(x){\n  return(x+1)\n}\n\n# returns a list, containing the answers\nlapply(some_numbers, add_one)\n#> [[1]]\n#> [1] 2\n#> \n#> [[2]]\n#> [1] 3\n#> \n#> [[3]]\n#> [1] 4\n#> \n#> [[4]]\n#> [1] 5\n\n# unlists the list\nunlist(lapply(some_numbers,add_one))\n#> [1] 2 3 4 5\n\n# sapply does the unlisting for you\nsapply(some_numbers, add_one)\n#> [1] 2 3 4 5\nsome_numbers <- c(1,2,3,4)\n\nlapply(some_numbers, FUN = function(x){x+1})\n#> [[1]]\n#> [1] 2\n#> \n#> [[2]]\n#> [1] 3\n#> \n#> [[3]]\n#> [1] 4\n#> \n#> [[4]]\n#> [1] 5\nsapply(some_numbers, FUN = function(x){x+1})\n#> [1] 2 3 4 5"},{"path":"coding-reference.html","id":"apply","chapter":"Coding Reference","heading":"0.26.5 apply","text":"apply function can used 2-dimensional data, allows apply function across rows columns data.Let’s say 5x5 matrix random numbers. Let’s find sum rowThe sum columnLet’s say matrix storing 3 samples. sample 10 numbers. sample stored column, row represents observation.Let’s use apply conduct 10 one-sample t-tests, one column. example, can pass mu=0 parameter t.test function. However, return entire ouput t-test list.wanted return t-values, rather whole output?might try , doesn’t workSo, write custom function","code":"\nrandom_matrix <- matrix(sample(1:10,25, replace=TRUE),ncol=5)\n\n# applies the sum function to each row\n# 1 tells apply to go across rows\napply(random_matrix,1,sum)\n#> [1] 24 24 35 16 26\n# applies the sum function to each column\n# 2 tells apply to go across columns\napply(random_matrix, 2, sum)\n#> [1] 22 20 28 18 37\nsample_matrix <- matrix(rnorm(30,0,1),ncol=3)\napply(sample_matrix,2,t.test, mu=0)\n#> [[1]]\n#> \n#>  One Sample t-test\n#> \n#> data:  newX[, i]\n#> t = -0.15555, df = 9, p-value = 0.8798\n#> alternative hypothesis: true mean is not equal to 0\n#> 95 percent confidence interval:\n#>  -0.6103617  0.5318253\n#> sample estimates:\n#>  mean of x \n#> -0.0392682 \n#> \n#> \n#> [[2]]\n#> \n#>  One Sample t-test\n#> \n#> data:  newX[, i]\n#> t = -0.66068, df = 9, p-value = 0.5254\n#> alternative hypothesis: true mean is not equal to 0\n#> 95 percent confidence interval:\n#>  -1.1479343  0.6289721\n#> sample estimates:\n#>  mean of x \n#> -0.2594811 \n#> \n#> \n#> [[3]]\n#> \n#>  One Sample t-test\n#> \n#> data:  newX[, i]\n#> t = -2.6149, df = 9, p-value = 0.02804\n#> alternative hypothesis: true mean is not equal to 0\n#> 95 percent confidence interval:\n#>  -1.10948184 -0.08024462\n#> sample estimates:\n#>  mean of x \n#> -0.5948632\napply(sample_matrix,2,t.test$statistic, mu=0)\n#> Error in t.test$statistic: object of type 'closure' is not subsettable\napply(sample_matrix, 2, \n      FUN = function(x){\n        t_out <- t.test(x,mu=0)\n        return(t_out$statistic)\n      })\n#> [1] -0.1555452 -0.6606843 -2.6148959"},{"path":"textbooks-and-other-resources.html","id":"textbooks-and-other-resources","chapter":"Textbooks and Other Resources","heading":"Textbooks and Other Resources","text":"(yet…maybe one day knows) complete statistics textbook statistics R. series weekly exercises used labs statistics courses psychology students. aimed initiating novice students learning programming environment statistics like R, also using R teaching tool aid conceptual understanding statistics.","code":""},{"path":"textbooks-and-other-resources.html","id":"statistics-textbooks-we-are-using","chapter":"Textbooks and Other Resources","heading":"0.27 Statistics textbooks we are using","text":"Students taking course Brooklyn College also taking separate series bi-weekly lectures, arrive lab discussions digested readings. beginning lab refer readings assigned students, come three different textbooks:Vokey & Allen,8 pdf available onlineAbdi, Edelman, Dowling, & Valentin,9 portions may downloadable google scholar, otherwise try find printed copy somewhere.Crump, Navarro, & Suzuki,10 https://crumplab.github.io/statistics/, lab manual R https://crumplab.github.io/statisticsLab/","code":""},{"path":"textbooks-and-other-resources.html","id":"other-online-textbooks","chapter":"Textbooks and Other Resources","heading":"0.28 Other online textbooks","text":"increasing numbers excellent, free, online resources learning statistics R, :Danielle Navarro’s Learning Statistics R website learning R R Psychological ScienceRussell Poldracks’s Statistical Thinking 21st CenturyMartin Speekenbrink’s Statistics: data analysis modelling, companion R book R companion Statistics: data analysis modellingInto python instead? Check Todd Gureckis’ Lab Cognition PerceptionLooking stats videos, check Erin Buchanan’s STATISTICS DOOM! youtube: https://www.youtube.com/channel/UCMdihazndR0f9XBoSXWqnYg","code":""},{"path":"textbooks-and-other-resources.html","id":"a-longer-list","chapter":"Textbooks and Other Resources","heading":"0.29 A longeR list","text":"Hadley Wickham written several fantastic free booksv keep coming back time, R Data Science, ggplot 2: elegant graphics data analyis, Advanced R, R packages.R markdown knitr core libraries using R create sorts reproducible documents pdfs websites. excellent resources:\nhttps://bookdown.org/yihui/rmarkdown/\nhttps://bookdown.org/yihui/rmarkdown-cookbook/\nhttps://bookdown.org/yihui/rmarkdown/https://bookdown.org/yihui/rmarkdown-cookbook/Github got ? Jenny Bryan pick https://happygitwithr.comGoogling R questions can often turn example someone solving issue closely related one. example, can copy error messages google , ask “X R.”Stackoverflow great, Google often take someone already asked question, someone else answered, usually many people answered question many ways.Danielle Navarro recently made website introducing R, ’s great, check (also made using R markdown process): http://compcogscisydney.org/psyr/Check slightly older programming book also introduces R https://crumplab.github.io/programmingforpsych/, actually don’t , ’s old now worth .Another solid accessible resource psyc stats using R https://ademos.people.uic.edu/index.html.https://cran.r-project.org/doc/contrib/Short-refcard.pdf link takes reference card, shows big long list intrinsic r functions.really great really long list resources R! https://paulvanderlaken.com/2017/08/10/r-resources-cheatsheets-tutorials-books/’s bunch R markdown tricks right https://holtzy.github.io/Pimp--rmd/.","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"1 R Basics","heading":"1 R Basics","text":"“8/27/2020 | Last Compiled: 2021-05-06”","code":""},{"path":"r-basics.html","id":"reading-and-walkthrough-video","chapter":"1 R Basics","heading":"1.1 Reading and walkthrough video","text":"Vokey & Allen,11 Chapter 1, available online : http://people.uleth.ca/~vokey/pdf/thinking.pdf.","code":""},{"path":"r-basics.html","id":"overview","chapter":"1 R Basics","heading":"1.2 Overview","text":"labs course designed give students exposure free open-source statistical programming language R. assumption students may zero prior experience scripting, coding, computer programming. semester use R tool data-analysis, tool sharpen understanding statistical concepts.starting lab follow getting started instructions install R, R-studio, create Github.com account, download github Desktop; , make sure test github pipeline. Throughout semester posting assignments Github.com, submitting links repositories blackboard.","code":""},{"path":"r-basics.html","id":"problem-1-summing-1-to-100","chapter":"1 R Basics","heading":"1.3 Problem 1: Summing 1 to 100","text":"Vokey & Allen12 tell story teacher giving challenging students add numbers 1 100. supposed stump one students, young Gauss. Apparently, , Gauss quickly wrote sum 5050.Gauss didn’t R, , can solve problem quickly :Use R find sum sequence numbers 1 100:Using sum(), simple fast solve Gauss’s problem R. easily find sums changing 1 100There many details going behind scenes R allow sum() function work. One detail get R create sequence numbers, another take action like adding numbers sequence. Two major concepts variables storing information (like sequences numbers), functions take actions transform input (number sequence) desired output (sum number sequence).","code":"\nsum(1:100)\n#> [1] 5050\nsum(5:10)\n#> [1] 45\nsum(100:200)\n#> [1] 15150"},{"path":"r-basics.html","id":"r-basics-background","chapter":"1 R Basics","heading":"1.4 R Basics Background","text":"","code":""},{"path":"r-basics.html","id":"creating-sequences-of-numbers-in-r","chapter":"1 R Basics","heading":"1.4.1 Creating sequences of numbers in R","text":"multiple ways create number sequences R. sequence integers can generated x:y, x starting value, y ending value.","code":"\n1:5\n#> [1] 1 2 3 4 5\n1:10\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n5:-5\n#>  [1]  5  4  3  2  1  0 -1 -2 -3 -4 -5"},{"path":"r-basics.html","id":"seq","chapter":"1 R Basics","heading":"1.4.2 seq()","text":"Sequences incremented constant value can created using seq() function. Look “help” R function typing ?name_of_function consoleR comes pre-packaged many functions like seq(), can write functions, download libraries functions people written extend base functionality R. look closely functions throughout semester.R function usually three components. 1) receive kind input, 2) “something,” 3) return kind output. R, use functions writing name function parentheses name(). function takes inputs, define inputs inside parentheses name(x=1). Functions can multiple inputs, separated commas.Let’s take look using seq() function generate sequences numbers.","code":"\n?seq\n#lines beginning with # are comments and not run\n\n#seq(from, to)\nseq(from = 1, to = 5)\n#> [1] 1 2 3 4 5\nseq(1, 5)\n#> [1] 1 2 3 4 5\n\n#seq(from, to, by= )\nseq(from = 1, to = 5, by = 2)\n#> [1] 1 3 5\nseq(1, 5, .5)\n#> [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\nseq(1, 10, 2)\n#> [1] 1 3 5 7 9\n\n#seq(from, to, length.out= )\nseq(from = 1, to = 2, length.out =5)\n#> [1] 1.00 1.25 1.50 1.75 2.00\n\nseq(5)\n#> [1] 1 2 3 4 5"},{"path":"r-basics.html","id":"problem-2-summing-any-constant-series","chapter":"1 R Basics","heading":"1.5 Problem 2: Summing any constant series","text":"Now seen sum() seq() functions, able use find sum constant series.example, find sum series 100 200, going five.also possible write analytic formula R, compare results, remember :\\(X_1 + X_2 + \\ldots + X_n = (\\frac{X_n-X_1}{c}+1)(\\frac{X_1+X_n}{2})\\)\\(X_1\\) starting value, \\(X_n\\) ending value \\(c\\) constant step value.example writing formula R. create variables names X1, Xn, step, assign (<-) value want. compute formula. give value previous example, sequence.","code":"\nsum( seq(100,200,5) )\n#> [1] 3150\nX1 <- 100\nXn <- 200\nstep <- 5\n\n(((Xn - X1)/step) + 1) * ((X1 + Xn)/2)\n#> [1] 3150\n\n( ( (Xn-X1)/step ) + 1 ) * ( (X1+Xn)/2 )\n#> [1] 3150"},{"path":"r-basics.html","id":"vectors-1","chapter":"1 R Basics","heading":"1.6 Vectors","text":"","code":""},{"path":"r-basics.html","id":"the-gaussian-trick","chapter":"1 R Basics","heading":"1.6.1 The Gaussian trick","text":"Remember Gauss added numbers 1 100 imagining two number lines:noted sum columns always added 101 (e.g., 1+100 = 101, 2+99 = 101, etc.). possible demonstrate R can directly add number lines:time created sequence numbers (e.g., 1 100) creating object called numeric vector R. Vectors can store multiple numbers.Vectors kind variable R. Vectors can names, can saved, can manipulated. Let’s take quick look vectors:name new vector. <- called assignment operator. 1:5 creates vector length 5, containing sequence numbers 1 5. plain language, “assign” object right (1:5), “name” written left side <-. words, put numbers 1 5 something called .create variable like , name appear global environment (top right environment tab). variable created first time (executing code console), becomes registered saved computer’s memory current R session.want double-check variable exists memory, enter name console, press enter:can clear (remove) variable using rm(). , can clear entire global environment using Session > Clear Workspace... RStudio menu.can also check class variable R using class() function. Let’s create two vectors check classes. vector contains integer class, b vector contains numeric class decimal values.","code":"\n1:100\n#>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n#>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n#>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n#>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n#>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n#>  [91]  91  92  93  94  95  96  97  98  99 100\n100:1\n#>   [1] 100  99  98  97  96  95  94  93  92  91  90  89  88  87  86  85  84  83\n#>  [19]  82  81  80  79  78  77  76  75  74  73  72  71  70  69  68  67  66  65\n#>  [37]  64  63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47\n#>  [55]  46  45  44  43  42  41  40  39  38  37  36  35  34  33  32  31  30  29\n#>  [73]  28  27  26  25  24  23  22  21  20  19  18  17  16  15  14  13  12  11\n#>  [91]  10   9   8   7   6   5   4   3   2   1\n1:100 + 100:1\n#>   [1] 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101\n#>  [19] 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101\n#>  [37] 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101\n#>  [55] 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101\n#>  [73] 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101\n#>  [91] 101 101 101 101 101 101 101 101 101 101\n#creates a variable a\na <- 1:5\na\n#> [1] 1 2 3 4 5\nrm(a)\na <- 1:10\nclass(a)\n#> [1] \"integer\"\n\nb <- seq(1,2,.25)\nclass(b)\n#> [1] \"numeric\""},{"path":"r-basics.html","id":"c","chapter":"1 R Basics","heading":"1.6.2 c()","text":"also possible create vectors contain characters, rather numbers. illustrate example character vector, introduce one basic R function c(), short “combine.”Vectors like trains, slots (train cars) can contain things, like passengers, oil coal. Trains can number train cars, just like vector can length (number slots).Importantly, train cars need connected together form whole train. Similarly, R, make vector need concatenate connect individual slots vector together. c() function . combines individual units together form vector.use c(), insert individual items separated commas parentheses. insert characters, wrap character (string characters) quotations.elements commas like individual train cars, c() function connects elements together single entity comprised multiple units, like train, called vector.","code":"\n?c\nletters <- c(\"a\",\"b\",\"c\")\nnumbers <- c(1,2,3)\nnumbers_as_chars <- c(\"1\",\"2\",\"3\")\nwords <- c(\"this\",\"is\",\"a\",\"vector\",\"of\",\"strings\")"},{"path":"r-basics.html","id":"length","chapter":"1 R Basics","heading":"1.6.3 length()","text":"Just like train specific number cars, vector specific number slots. called length vector. R length() function reports length vector.","code":"\nlength(letters)\n#> [1] 3\nlength(words)\n#> [1] 6"},{"path":"r-basics.html","id":"more-on-combining","chapter":"1 R Basics","heading":"1.6.4 More on combining","text":"c() function flexible can combine sorts elements, including vectors variables.Remember vectors different classes depending kind elements inside vector. important, R requires elements vector class.possible combine vectors start different classes, R may give error, convert one class another. go back train car analogy, R doesn’t like trains different kinds cars…wants whole train passenger cars, whole train oil tankers.","code":"\nsome_numbers <- c(1, 2, 3, 1:5)\n\nsome_characters <- c(letters, words)\nclass(c(1,2,3))\n#> [1] \"numeric\"\nclass(c(\"A\",\"B\",\"C\"))\n#> [1] \"character\"\nclass(c(TRUE,FALSE,TRUE))\n#> [1] \"logical\"\n# the numbers are converted to characters\nc(1,2,3,\"a\",\"b\",\"c\")\n#> [1] \"1\" \"2\" \"3\" \"a\" \"b\" \"c\""},{"path":"r-basics.html","id":"indexing-a-vector","chapter":"1 R Basics","heading":"1.6.5 Indexing a vector","text":"Vector indexing iallows elements inspected changed. like train, inspect contents cars 3 5, unload car 7 put something else .Square bracket [] notation indexes vector, variable_name[x]; , x another vector specifying indexed slots.following examples use [] index specific elements vector . outcome elements specified inside square brackets printed console.also possible assign new values specific elements vector:","code":"\na <- c(1,6,3,2,8,9) # make a vector\na[1] # first element\n#> [1] 1\na[2] # second element\n#> [1] 6\na[1:3] # 1st to 3rd elements\n#> [1] 1 6 3\na[c(1,5)] # elements 1 and 5\n#> [1] 1 8\n# assign 100 to the first slot of a\na[1] <- 100\na\n#> [1] 100   6   3   2   8   9\n\n# assign the value 1 to slots 5 to 6 of a\na[5:6] <- 1\na\n#> [1] 100   6   3   2   1   1"},{"path":"r-basics.html","id":"growing-a-vector","chapter":"1 R Basics","heading":"1.6.6 Growing a vector","text":"upcoming labs use vectors store information. Sometimes know advance many slots need vector, times might know, instead decide build vector one slot time.begin empty (NULL) vector. use c() command, don’t combine anything together. like starting train cars .can add slot vector combining new element existing variable. combine 1, assign result back , replacing ’s original NULL value.keep , keep adding 1s, end .Consider alternative method growing vector:","code":"\na <- c()\na\n#> NULL\na <- c(a,1)\na\n#> [1] 1\na <- c(a,1)\na\n#> [1] 1 1\na <- c(a,1) # c(1,1,1)\na\n#> [1] 1 1 1\na <- c(a,1)\na\n#> [1] 1 1 1 1\na <- c(a,1)\na\n#> [1] 1 1 1 1 1\na <- c()\na\n#> NULL\n\na[1] <- 1\na\n#> [1] 1\n\na[2] <- 1\na\n#> [1] 1 1\n\na[3] <- 1\na\n#> [1] 1 1 1\n\na[10] <- 1\na\n#>  [1]  1  1  1 NA NA NA NA NA NA  1"},{"path":"r-basics.html","id":"problem-3-writing-a-sum-function-in-r","chapter":"1 R Basics","heading":"1.7 Problem 3: Writing a sum function in R","text":"already used R solve problems Chapter 1 Vokey & Allen (2018). can create sequences numbers, can create custom vectors numbers, can use sum() function find sum. However, haven’t discussed sum() function actually works. R know find sum?example writing sum function R. example involves understanding loops writing custom functions, explained next sections.","code":"\nmy_sum <- function(x) {\n  sum <- 0\n  for(i in x) sum <- sum + i\n  return(sum)\n}\n\nmy_sum(1:100)\n#> [1] 5050"},{"path":"r-basics.html","id":"algorithms","chapter":"1 R Basics","heading":"1.8 Algorithms","text":"understand functions like sum() work R, need understand general concept algorithm. ’ll define algorithm recipe, series steps/actions result particular outcome. scripting language like R, possible define algorithms infallible. , given input, always apply steps arrive answer demanded algorithm.sum series numbers head, say numbers 1 5, probably applying simple algorithm describe like :Take first number add second (1+2 = 3)Take sum (3) add next number (3+3 = 6)Repeat step 2 numbers series6+4 = 1010+5 = 15report final sum (15)Consider look R. one example producing algorithm R. Everytime run script, always end sum 15, answer demanded series steps wrote .","code":"\nsum(1:5)\n#> [1] 15\na <- 1:5\na\n#> [1] 1 2 3 4 5\n\nthe_sum <- a[1]+a[2]\nthe_sum\n#> [1] 3\nthe_sum <- the_sum + a[3]\nthe_sum\n#> [1] 6\nthe_sum <- the_sum + a[4]\nthe_sum\n#> [1] 10\nthe_sum <- the_sum + a[5]\nthe_sum\n#> [1] 15"},{"path":"r-basics.html","id":"loops-1","chapter":"1 R Basics","heading":"1.9 Loops","text":"example shows algorithm written hand R. tiresome write sum sequence many numbers. Fortunately, ways automate repetitive processes R. common method repeating commands R use loop.Check R help Control Flow ?Control.(){}\n(loop control){something iteration}basic syntax loops follows:Loop control defined parentheses. name iterator placed left (can assigned name want, need declared advance). execution loop, iterator takes values inside vector placed right side . Specifically, following happening.Loop steps:\n1. iterator <- vector[1]\n2. iterator <- vector[2]\n3. iterator <- vector[3]\n4. etc.loop automatically stop reaches last item vector. loop can stopped using break command.","code":"\nfor(iterator in vector){\n  #do something\n}\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5){\n  print(\"hello\")\n}\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n# show the value of i each step of the loop\nfor(i in 1:5){\n  print(i)\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n# define the vector to loop over in advance\nmy_sequence <- 1:5\nfor(i in my_sequence){\n  print(i)\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n# Reminder that i becomes the next value in the vector\n# your vector can have any order \nmy_sequence <- c(1,5,2,3,4)\nfor(i in my_sequence){\n  print(i)\n}\n#> [1] 1\n#> [1] 5\n#> [1] 2\n#> [1] 3\n#> [1] 4\n# index vector does not need to be numbers\nmy_things <- c(\"A\",\"B\",\"C\",\"D\")\nfor(i in my_things){\n  print(i)\n}\n#> [1] \"A\"\n#> [1] \"B\"\n#> [1] \"C\"\n#> [1] \"D\""},{"path":"r-basics.html","id":"breaking-a-loop-1","chapter":"1 R Basics","heading":"1.9.1 Breaking a loop","text":"break stops loop. Used logical statements define conditions necessary cause break.","code":"\nfor(i in 1:10){\n  if(i <= 5){\n    print(i)\n  } else {\n    break\n  }\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5"},{"path":"r-basics.html","id":"while-loops-1","chapter":"1 R Basics","heading":"1.9.2 While loops","text":"loops run logical condition met. iterator, just logic statement needs met.one prints less 6. soon becomes “less 6,” loop stops. Critically, inside loop, value increases iteration.","code":"\ni <- 1 # create an variable\nwhile (i < 6) {\n  print(i)\n  i = i+1 #add one each step of the loop\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5"},{"path":"r-basics.html","id":"repeat-loops-1","chapter":"1 R Basics","heading":"1.9.3 Repeat loops","text":"Similar , let’s things condition met.","code":"\ni<-0\nrepeat{\n  i<-i+1\n  print(i)\n  if(i==5){\n    break\n  }\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5"},{"path":"r-basics.html","id":"examples-1","chapter":"1 R Basics","heading":"1.9.4 Examples","text":"Braces needed one lineUsing value iterator assign values systematically another variable.Using loop add numbers vector.example shows use loop compute sum numbers vector . example using loop algorithm. end checked custom script sum() function, see arrived answer.final task lab take look R functions, learn write basic functions like sum().","code":"\nfor(i in 1:5) print(i)\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n# put 1 into the first five positions of x\nx <- c() # create empty vector\nfor(i in 1:5){\n  x[i] <- 1  # assign 1 to the ith slot in x\n}\nx\n#> [1] 1 1 1 1 1\n\n\n# put the numbers 1-5 in the first 5 positions of x\nx <-c()\nfor(i in 1:5){\n  x[i] <- i\n}\nx\n#> [1] 1 2 3 4 5\na <- c(10,20,30,40,50) #some numbers\n\nthe_sum <- 0 # initialize a variable that will keep track of the sum\n\nfor (i in a) {\n the_sum <- the_sum + i  \n}\n\nthe_sum\n#> [1] 150\nsum(a) #check against the sum function\n#> [1] 150"},{"path":"r-basics.html","id":"functions-1","chapter":"1 R Basics","heading":"1.10 Functions","text":"Functions re-useable algorithms. example, rather re-writing code necessary compute sum everytime want find sum, instead store necessary code inside named variable called sum(), “call” function writing name providing inputs.fairly straightforward write custom functions R, learning write functions excellent method improve understanding R fundamentals.","code":""},{"path":"r-basics.html","id":"function-syntax-1","chapter":"1 R Basics","heading":"1.10.1 function syntax","text":"general syntax writing functions:","code":"\nfunction_name <- function(input1,input2){\n  #code here\n  return(something)\n}"},{"path":"r-basics.html","id":"example-functions-1","chapter":"1 R Basics","heading":"1.10.2 Example functions","text":"function input (). Whenever run function, simply return whatever placed inside return statement.function simply takes input, returns input without modifying .function takes input, creates internal variable called temp assigns input+1. contents temp returned. Note , checking input, return erro input character (can’t add one character R)function adds input checking. add one input numeric type. Otherwise, use stop() return error message consoleA function three inputs","code":"\n# define the function\nprint_hello_world <- function(){\n  return(print(\"hello world\"))\n}\n\n# use the function\nprint_hello_world()\n#> [1] \"hello world\"\nreturn_input <- function(input){\n  return(input)\n}\n\n# the variable input is assigned a 1\n# then we return(input), which will result in a 1\n# because the function internally assigns 1 to the input\nreturn_input(1)\n#> [1] 1\na <- \"something\"\nreturn_input(a)\n#> [1] \"something\"\nadd_one <- function(input){\n  temp <- input+1\n  return(temp)\n}\nadd_one(1)\n#> [1] 2\nadd_one(\"a\") #this will cause an error\n#> Error in input + 1: non-numeric argument to binary operator\nadd_one <- function(input){\n  if(class(input) == \"numeric\"){\n    temp <- input+1\n    return(temp)\n  } else {\n    return(stop(\"input must be numeric\"))\n  }\n}\nadd_one(1)\n#> [1] 2\nadd_one(\"a\")\n#> Error in add_one(\"a\"): input must be numeric\nadd_multiply <- function(input, x_plus, x_times){\n  temp <- (input+x_plus)*x_times\n  return(temp)\n}\n\n# input is 1\n# x_plus <- 2\n# x_times <- 3\n# will return (1+2)*3 = 9\nadd_multiply(1,2,3)\n#> [1] 9"},{"path":"r-basics.html","id":"lab-1-generalization-assignment","chapter":"1 R Basics","heading":"1.11 Lab 1 Generalization Assignment","text":"Follow instructions complete assignment lab 1 hand due date blackboard. first lab taken extra step pretending student course, completed first lab . next video shows complete lab student. important try solve problems , please use video resource help get stuck.","code":""},{"path":"r-basics.html","id":"instructions","chapter":"1 R Basics","heading":"1.11.1 Instructions","text":"general, labs present discussion problems issues example code like , students tasked completing generalization assignments, showing can work concepts tools independently.assignment instructions following:Make new R project (initialized git repository) called \"StatsLab1’.Create new R Markdown document called “Lab1.Rmd”Upload StatsLab1 R project Github.com using Github DesktopUse Lab1.Rmd show work attempting solve following generalization problems. Commit work regularly appears Github repository.Submit github repository link Lab 1 blackboard.six problems solve, worth 1 point.Refer getting started videos examples creating new R project uploading Github. problems steps resolved first class, please email , create issue course github page https://github.com/CrumpLab/psyc7709Lab/issues","code":""},{"path":"r-basics.html","id":"problems","chapter":"1 R Basics","heading":"1.11.2 Problems","text":"Compute sum sequence 100 1000, going constant value 100 (100,200,300,400,500,600,700,800,900,1000).Compute sum numbers (1,3,2,4,3,5,4,3,4,5,6,5,6,7,6,5,6,5,4,3,4,5)Write custom sequence generator function using loop generates sequence starting integer value ending integer value steps 1. Demonstrate can produce sequence 1 10.Write custom function implement following general equation find sum constant series:\\(X_1 + X_2 + \\ldots + X_n = (\\frac{X_n-X_1}{c}+1)(\\frac{X_1+X_n}{2})\\)Demonstrate function correctly produces sum series :Write custom function generates constant series start end values, constant, finds sum. function output sequence sum. problem, feel free use existing seq() sum() functions custom function. Demonstrate function correctly prints sequence (10 100 steps 10), sum.Use sum() length() functions calculate mean (average) numbers x = c(1,2,3,4,5).","code":"\nseq(10,100,10)\n#>  [1]  10  20  30  40  50  60  70  80  90 100"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
